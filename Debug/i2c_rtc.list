
i2c_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08004dc4  08004dc4  00014dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800502c  0800502c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005034  08005034  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800503c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  200000e0  0800511c  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  0800511c  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e010  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234a  00000000  00000000  0002e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00030470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00030f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017479  00000000  00000000  000319a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def9  00000000  00000000  00048e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d4f  00000000  00000000  00056d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfa61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d4  00000000  00000000  000dfab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e0 	.word	0x200000e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004dac 	.word	0x08004dac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e4 	.word	0x200000e4
 80001dc:	08004dac 	.word	0x08004dac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PB4   ------> I2C3_SDA
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	4b4b      	ldr	r3, [pc, #300]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a4a      	ldr	r2, [pc, #296]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b48      	ldr	r3, [pc, #288]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b44      	ldr	r3, [pc, #272]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a43      	ldr	r2, [pc, #268]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b41      	ldr	r3, [pc, #260]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a35      	ldr	r2, [pc, #212]	; (80006d0 <MX_GPIO_Init+0x148>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <MX_GPIO_Init+0x148>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b2f      	ldr	r3, [pc, #188]	; (80006d0 <MX_GPIO_Init+0x148>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a2e      	ldr	r2, [pc, #184]	; (80006d0 <MX_GPIO_Init+0x148>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b2c      	ldr	r3, [pc, #176]	; (80006d0 <MX_GPIO_Init+0x148>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800062a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800062e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000630:	2303      	movs	r3, #3
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4825      	ldr	r0, [pc, #148]	; (80006d4 <MX_GPIO_Init+0x14c>)
 8000640:	f001 f85a 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000644:	2303      	movs	r3, #3
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000648:	2303      	movs	r3, #3
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4820      	ldr	r0, [pc, #128]	; (80006d8 <MX_GPIO_Init+0x150>)
 8000658:	f001 f84e 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800065c:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 8000660:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	481a      	ldr	r0, [pc, #104]	; (80006dc <MX_GPIO_Init+0x154>)
 8000672:	f001 f841 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000676:	f24f 43ef 	movw	r3, #62703	; 0xf4ef
 800067a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067c:	2303      	movs	r3, #3
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4815      	ldr	r0, [pc, #84]	; (80006e0 <MX_GPIO_Init+0x158>)
 800068c:	f001 f834 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000690:	2304      	movs	r3, #4
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000694:	2303      	movs	r3, #3
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	4810      	ldr	r0, [pc, #64]	; (80006e4 <MX_GPIO_Init+0x15c>)
 80006a4:	f001 f828 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006a8:	2310      	movs	r3, #16
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ac:	2312      	movs	r3, #18
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80006b8:	2309      	movs	r3, #9
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <MX_GPIO_Init+0x158>)
 80006c4:	f001 f818 	bl	80016f8 <HAL_GPIO_Init>

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40021c00 	.word	0x40021c00
 80006dc:	40020000 	.word	0x40020000
 80006e0:	40020400 	.word	0x40020400
 80006e4:	40020c00 	.word	0x40020c00

080006e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x50>)
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_I2C1_Init+0x54>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x50>)
 80006f4:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_I2C1_Init+0x58>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_I2C1_Init+0x50>)
 8000706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_I2C1_Init+0x50>)
 8000726:	f001 f96b 	bl	8001a00 <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 f996 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000110 	.word	0x20000110
 800073c:	40005400 	.word	0x40005400
 8000740:	000186a0 	.word	0x000186a0

08000744 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <HAL_I2C_MspInit+0x84>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d12c      	bne.n	80007c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_I2C_MspInit+0x88>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <HAL_I2C_MspInit+0x88>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_I2C_MspInit+0x88>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000788:	2312      	movs	r3, #18
 800078a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000794:	2304      	movs	r3, #4
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	480c      	ldr	r0, [pc, #48]	; (80007d0 <HAL_I2C_MspInit+0x8c>)
 80007a0:	f000 ffaa 	bl	80016f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_I2C_MspInit+0x88>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_I2C_MspInit+0x88>)
 80007ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_I2C_MspInit+0x88>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40005400 	.word	0x40005400
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020400 	.word	0x40020400

080007d4 <__io_putchar>:
}DeviceState;

DeviceState state;

int __io_putchar(int ch)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  char v;
  v = (uint8_t )ch;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	73fb      	strb	r3, [r7, #15]
  return HAL_UART_Transmit(&huart2, (uint8_t *)&v, 1 ,1000);
 80007e2:	f107 010f 	add.w	r1, r7, #15
 80007e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ea:	2201      	movs	r2, #1
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <__io_putchar+0x28>)
 80007ee:	f002 fb8a 	bl	8002f06 <HAL_UART_Transmit>
 80007f2:	4603      	mov	r3, r0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000168 	.word	0x20000168

08000800 <__io_getchar>:


int __io_getchar(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
  // Clear the Overrun flag just before receiving the first character
  __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_ORE);
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <__io_getchar+0x3c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f06f 0208 	mvn.w	r2, #8
 8000812:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000814:	1df9      	adds	r1, r7, #7
 8000816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081a:	2201      	movs	r2, #1
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <__io_getchar+0x3c>)
 800081e:	f002 fc04 	bl	800302a <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000822:	1df9      	adds	r1, r7, #7
 8000824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000828:	2201      	movs	r2, #1
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <__io_getchar+0x3c>)
 800082c:	f002 fb6b 	bl	8002f06 <HAL_UART_Transmit>
  return ch;
 8000830:	79fb      	ldrb	r3, [r7, #7]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000168 	.word	0x20000168

08000840 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_UART_ErrorCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d102      	bne.n	8000858 <HAL_UART_ErrorCallback+0x18>
  {
      printf("\nGet uart error\n");
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <HAL_UART_ErrorCallback+0x24>)
 8000854:	f003 fac6 	bl	8003de4 <puts>
  }
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40004400 	.word	0x40004400
 8000864:	08004dc4 	.word	0x08004dc4

08000868 <UARTReceiveEnable>:

void UARTReceiveEnable(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&UARTDataRX, 1);
 800086c:	2201      	movs	r2, #1
 800086e:	4903      	ldr	r1, [pc, #12]	; (800087c <UARTReceiveEnable+0x14>)
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <UARTReceiveEnable+0x18>)
 8000872:	f002 fc7c 	bl	800316e <HAL_UART_Receive_IT>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000fc 	.word	0x200000fc
 8000880:	20000168 	.word	0x20000168

08000884 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_UART_RxCpltCallback+0x30>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d10a      	bne.n	80008ac <HAL_UART_RxCpltCallback+0x28>
  {
    state = SymbolReceive;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_UART_RxCpltCallback+0x34>)
 8000898:	2203      	movs	r2, #3
 800089a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, &UARTDataRX, 1, 100);
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	2201      	movs	r2, #1
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <HAL_UART_RxCpltCallback+0x38>)
 80008a2:	4807      	ldr	r0, [pc, #28]	; (80008c0 <HAL_UART_RxCpltCallback+0x3c>)
 80008a4:	f002 fb2f 	bl	8002f06 <HAL_UART_Transmit>
    UARTReceiveEnable();
 80008a8:	f7ff ffde 	bl	8000868 <UARTReceiveEnable>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40004400 	.word	0x40004400
 80008b8:	20000164 	.word	0x20000164
 80008bc:	200000fc 	.word	0x200000fc
 80008c0:	20000168 	.word	0x20000168

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008c8:	b0a1      	sub	sp, #132	; 0x84
 80008ca:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008cc:	f000 fcda 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f85c 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f7ff fe58 	bl	8000588 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d8:	f000 f9da 	bl	8000c90 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008dc:	f7ff ff04 	bl	80006e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  rtcInit(&hi2c1);
 80008e0:	4824      	ldr	r0, [pc, #144]	; (8000974 <main+0xb0>)
 80008e2:	f000 fa79 	bl	8000dd8 <rtcInit>
  //setDateTime("2021-06-03 12:21:10", DS1307_MINIMAL_BUFFER_LENGTH);
//  setDayOfWeek('4');


  uint8_t buffer[100] = {0};
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2260      	movs	r2, #96	; 0x60
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 f9e8 	bl	8003cc8 <memset>
  char * p;
  p = (char*)buffer;
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  getDateTime(p, 100);
 80008fe:	2164      	movs	r1, #100	; 0x64
 8000900:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000902:	f000 faa1 	bl	8000e48 <getDateTime>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("%s", greeting);
 8000906:	491c      	ldr	r1, [pc, #112]	; (8000978 <main+0xb4>)
 8000908:	481c      	ldr	r0, [pc, #112]	; (800097c <main+0xb8>)
 800090a:	f003 f9e5 	bl	8003cd8 <iprintf>

  while (1)
  {

      HAL_Delay(1000);
 800090e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000912:	f000 fd29 	bl	8001368 <HAL_Delay>

//      DD-MM-YY Day-Date-Month-Year

//      getDateTime(p, 100);
      printf("%d-%d-%d %s-%d-%s-%d\r\n", getMonthDay(), getMonth(), getYear()-2000, days[getDayOfWeek()], getMonthDay(), monthes[getMonth()], getYear());
 8000916:	f000 fc85 	bl	8001224 <getMonthDay>
 800091a:	4603      	mov	r3, r0
 800091c:	4698      	mov	r8, r3
 800091e:	f000 fc51 	bl	80011c4 <getMonth>
 8000922:	4603      	mov	r3, r0
 8000924:	4699      	mov	r9, r3
 8000926:	f000 fc1d 	bl	8001164 <getYear>
 800092a:	4603      	mov	r3, r0
 800092c:	f5a3 66fa 	sub.w	r6, r3, #2000	; 0x7d0
 8000930:	f000 fbe4 	bl	80010fc <getDayOfWeek>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <main+0xbc>)
 800093a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800093e:	f000 fc71 	bl	8001224 <getMonthDay>
 8000942:	4603      	mov	r3, r0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	f000 fc3d 	bl	80011c4 <getMonth>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <main+0xc0>)
 8000950:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8000954:	f000 fc06 	bl	8001164 <getYear>
 8000958:	4603      	mov	r3, r0
 800095a:	9303      	str	r3, [sp, #12]
 800095c:	9502      	str	r5, [sp, #8]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	9400      	str	r4, [sp, #0]
 8000964:	4633      	mov	r3, r6
 8000966:	464a      	mov	r2, r9
 8000968:	4641      	mov	r1, r8
 800096a:	4807      	ldr	r0, [pc, #28]	; (8000988 <main+0xc4>)
 800096c:	f003 f9b4 	bl	8003cd8 <iprintf>
      HAL_Delay(1000);
 8000970:	e7cd      	b.n	800090e <main+0x4a>
 8000972:	bf00      	nop
 8000974:	20000110 	.word	0x20000110
 8000978:	20000000 	.word	0x20000000
 800097c:	08004e48 	.word	0x08004e48
 8000980:	20000024 	.word	0x20000024
 8000984:	20000040 	.word	0x20000040
 8000988:	08004e4c 	.word	0x08004e4c

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f003 f994 	bl	8003cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <SystemClock_Config+0xcc>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <SystemClock_Config+0xcc>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <SystemClock_Config+0xcc>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <SystemClock_Config+0xd0>)
 80009da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <SystemClock_Config+0xd0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f4:	2310      	movs	r3, #16
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a00:	2308      	movs	r3, #8
 8000a02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000a04:	2354      	movs	r3, #84	; 0x54
 8000a06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 0320 	add.w	r3, r7, #32
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fde1 	bl	80025dc <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a20:	f000 f81e 	bl	8000a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f843 	bl	8002acc <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a4c:	f000 f808 	bl	8000a60 <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3750      	adds	r7, #80	; 0x50
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 fc0e 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <USART2_IRQHandler+0x10>)
 8000b16:	f002 fb5b 	bl	80031d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000168 	.word	0x20000168

08000b24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e00a      	b.n	8000b4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b36:	f7ff fe63 	bl	8000800 <__io_getchar>
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf0      	blt.n	8000b36 <_read+0x12>
	}

return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e009      	b.n	8000b84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe2b 	bl	80007d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf1      	blt.n	8000b70 <_write+0x12>
	}
	return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:

int _close(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
	return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f003 f820 	bl	8003c74 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20018000 	.word	0x20018000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	20000100 	.word	0x20000100
 8000c68:	200001d8 	.word	0x200001d8

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_USART2_UART_Init+0x50>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cc8:	f002 f8d0 	bl	8002e6c <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd2:	f7ff fec5 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000168 	.word	0x20000168
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <HAL_UART_MspInit+0x94>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d133      	bne.n	8000d6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <HAL_UART_MspInit+0x9c>)
 8000d5a:	f000 fccd 	bl	80016f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2026      	movs	r0, #38	; 0x26
 8000d64:	f000 fbff 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d68:	2026      	movs	r0, #38	; 0x26
 8000d6a:	f000 fc18 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8a:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da0:	4c0b      	ldr	r4, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dae:	f7ff ff5d 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f002 ff65 	bl	8003c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fd85 	bl	80008c4 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8000dc8:	0800503c 	.word	0x0800503c
  ldr r2, =_sbss
 8000dcc:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8000dd0:	200001d4 	.word	0x200001d4

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <rtcInit>:

struct Rtc rtc;
I2C_HandleTypeDef *i2cHandle;
char bufferBcd[2] = "";

uint8_t rtcInit(I2C_HandleTypeDef *i2c) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	if (i2c == NULL) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <rtcInit+0x12>
		return 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e003      	b.n	8000df2 <rtcInit+0x1a>
	}

	i2cHandle = i2c;
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <rtcInit+0x28>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6013      	str	r3, [r2, #0]
	return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200001bc 	.word	0x200001bc

08000e04 <BcdByteToStr>:

char *BcdByteToStr(uint8_t byte, char *buffer) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]

	//if (strnlen(&buffer[0]) >= 2) {
		buffer[0] = (byte >> 4) + 0x30;
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	091b      	lsrs	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	3330      	adds	r3, #48	; 0x30
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	701a      	strb	r2, [r3, #0]
		buffer[1] = (byte & 0b00001111) + 0x30;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	3230      	adds	r2, #48	; 0x30
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	701a      	strb	r2, [r3, #0]
		buffer[2] = '\0';
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	3302      	adds	r3, #2
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
	//}

	return &buffer[0];
 8000e38:	683b      	ldr	r3, [r7, #0]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <getDateTime>:
	unsigned char bcdByteYoung = buffer[1] - 0x30;

	return bcdByteOld | bcdByteYoung;
}

uint8_t getDateTime(char *buffer, uint8_t bufferLength) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af04      	add	r7, sp, #16
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]

	if (bufferLength < DS1307_MINIMAL_BUFFER_LENGTH) {
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	2b12      	cmp	r3, #18
 8000e58:	d801      	bhi.n	8000e5e <getDateTime+0x16>
		return 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e13a      	b.n	80010d4 <getDateTime+0x28c>
	}

	memset(buffer,0,bufferLength);
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	461a      	mov	r2, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f002 ff2f 	bl	8003cc8 <memset>

	uint8_t rtcRegisterData = 0b00000000;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_YEAR, 1, (uint8_t*)&rtcRegisterData, sizeof(rtcRegisterData), HAL_MAX_DELAY);
 8000e6e:	4b9b      	ldr	r3, [pc, #620]	; (80010dc <getDateTime+0x294>)
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	f107 030f 	add.w	r3, r7, #15
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2301      	movs	r3, #1
 8000e84:	2206      	movs	r2, #6
 8000e86:	21d0      	movs	r1, #208	; 0xd0
 8000e88:	f000 fefe 	bl	8001c88 <HAL_I2C_Mem_Read>
	rtcRegisterData &= DS1307_MASK_YEAR;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	73fb      	strb	r3, [r7, #15]
	strcat(buffer, (char*)&"2");
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff f9a5 	bl	80001e0 <strlen>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4990      	ldr	r1, [pc, #576]	; (80010e0 <getDateTime+0x298>)
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	8013      	strh	r3, [r2, #0]
	strcat(buffer, (char*)&"0");
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff f999 	bl	80001e0 <strlen>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	498b      	ldr	r1, [pc, #556]	; (80010e4 <getDateTime+0x29c>)
 8000eb8:	461a      	mov	r2, r3
 8000eba:	460b      	mov	r3, r1
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	8013      	strh	r3, [r2, #0]
	strcat(buffer, BcdByteToStr(rtcRegisterData, &bufferBcd[0]));
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	4989      	ldr	r1, [pc, #548]	; (80010e8 <getDateTime+0x2a0>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff9d 	bl	8000e04 <BcdByteToStr>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f002 ff90 	bl	8003df4 <strcat>
	strcat(buffer, (char*)&"-");
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff f983 	bl	80001e0 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4982      	ldr	r1, [pc, #520]	; (80010ec <getDateTime+0x2a4>)
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	8013      	strh	r3, [r2, #0]
	rtc.year = 2000 + atoi(&bufferBcd[0]);
 8000eec:	487e      	ldr	r0, [pc, #504]	; (80010e8 <getDateTime+0x2a0>)
 8000eee:	f002 febd 	bl	8003c6c <atoi>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b7c      	ldr	r3, [pc, #496]	; (80010f0 <getDateTime+0x2a8>)
 8000efe:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_MONTH, 1, (uint8_t*)&rtcRegisterData, sizeof(rtcRegisterData), HAL_MAX_DELAY);
 8000f00:	4b76      	ldr	r3, [pc, #472]	; (80010dc <getDateTime+0x294>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	f107 030f 	add.w	r3, r7, #15
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2301      	movs	r3, #1
 8000f16:	2205      	movs	r2, #5
 8000f18:	21d0      	movs	r1, #208	; 0xd0
 8000f1a:	f000 feb5 	bl	8001c88 <HAL_I2C_Mem_Read>
	rtcRegisterData &= DS1307_MASK_MONTH;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	73fb      	strb	r3, [r7, #15]
	strcat(buffer, BcdByteToStr(rtcRegisterData, &bufferBcd[0]));
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	496f      	ldr	r1, [pc, #444]	; (80010e8 <getDateTime+0x2a0>)
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff69 	bl	8000e04 <BcdByteToStr>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4619      	mov	r1, r3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f002 ff5c 	bl	8003df4 <strcat>
	strcat(buffer, (char*)&"-");
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff f94f 	bl	80001e0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4968      	ldr	r1, [pc, #416]	; (80010ec <getDateTime+0x2a4>)
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	460b      	mov	r3, r1
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	8013      	strh	r3, [r2, #0]
	rtc.month = atoi(&bufferBcd[0]);
 8000f54:	4864      	ldr	r0, [pc, #400]	; (80010e8 <getDateTime+0x2a0>)
 8000f56:	f002 fe89 	bl	8003c6c <atoi>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b64      	ldr	r3, [pc, #400]	; (80010f0 <getDateTime+0x2a8>)
 8000f60:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Mem_Read(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_DAY_OF_MONTH, 1, (uint8_t*)&rtcRegisterData, sizeof(rtcRegisterData), HAL_MAX_DELAY);
 8000f62:	4b5e      	ldr	r3, [pc, #376]	; (80010dc <getDateTime+0x294>)
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	f107 030f 	add.w	r3, r7, #15
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	2204      	movs	r2, #4
 8000f7a:	21d0      	movs	r1, #208	; 0xd0
 8000f7c:	f000 fe84 	bl	8001c88 <HAL_I2C_Mem_Read>
	rtcRegisterData &= DS1307_MASK_DAY_OF_MONTH;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	73fb      	strb	r3, [r7, #15]
	strcat(buffer, BcdByteToStr(rtcRegisterData, &bufferBcd[0]));
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	4956      	ldr	r1, [pc, #344]	; (80010e8 <getDateTime+0x2a0>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff38 	bl	8000e04 <BcdByteToStr>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f002 ff2b 	bl	8003df4 <strcat>
	strcat(buffer, (char*)&" ");
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff f91e 	bl	80001e0 <strlen>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	4951      	ldr	r1, [pc, #324]	; (80010f4 <getDateTime+0x2ac>)
 8000fae:	461a      	mov	r2, r3
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	8013      	strh	r3, [r2, #0]
	rtc.dayOfMonth = atoi(&bufferBcd[0]);
 8000fb6:	484c      	ldr	r0, [pc, #304]	; (80010e8 <getDateTime+0x2a0>)
 8000fb8:	f002 fe58 	bl	8003c6c <atoi>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <getDateTime+0x2a8>)
 8000fc2:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Mem_Read(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_HOUR, 1, (uint8_t*)&rtcRegisterData, sizeof(rtcRegisterData), HAL_MAX_DELAY);
 8000fc4:	4b45      	ldr	r3, [pc, #276]	; (80010dc <getDateTime+0x294>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	f107 030f 	add.w	r3, r7, #15
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2202      	movs	r2, #2
 8000fdc:	21d0      	movs	r1, #208	; 0xd0
 8000fde:	f000 fe53 	bl	8001c88 <HAL_I2C_Mem_Read>
	rtcRegisterData &= DS1307_MASK_HOUR;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	73fb      	strb	r3, [r7, #15]
	strcat(buffer, BcdByteToStr(rtcRegisterData, &bufferBcd[0]));
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	493e      	ldr	r1, [pc, #248]	; (80010e8 <getDateTime+0x2a0>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff07 	bl	8000e04 <BcdByteToStr>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f002 fefa 	bl	8003df4 <strcat>
	strcat(buffer, (char*)&":");
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff f8ed 	bl	80001e0 <strlen>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	493a      	ldr	r1, [pc, #232]	; (80010f8 <getDateTime+0x2b0>)
 8001010:	461a      	mov	r2, r3
 8001012:	460b      	mov	r3, r1
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	8013      	strh	r3, [r2, #0]
	rtc.hour = atoi(&bufferBcd[0]);
 8001018:	4833      	ldr	r0, [pc, #204]	; (80010e8 <getDateTime+0x2a0>)
 800101a:	f002 fe27 	bl	8003c6c <atoi>
 800101e:	4603      	mov	r3, r0
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <getDateTime+0x2a8>)
 8001024:	715a      	strb	r2, [r3, #5]

	HAL_I2C_Mem_Read(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_MINUTE, 1, (uint8_t*)&rtcRegisterData, sizeof(rtcRegisterData), HAL_MAX_DELAY);
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <getDateTime+0x294>)
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	2301      	movs	r3, #1
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	f107 030f 	add.w	r3, r7, #15
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	2201      	movs	r2, #1
 800103e:	21d0      	movs	r1, #208	; 0xd0
 8001040:	f000 fe22 	bl	8001c88 <HAL_I2C_Mem_Read>
	rtcRegisterData &= DS1307_MASK_MINUTE;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800104a:	b2db      	uxtb	r3, r3
 800104c:	73fb      	strb	r3, [r7, #15]
	strcat(buffer, BcdByteToStr(rtcRegisterData, &bufferBcd[0]));
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	4925      	ldr	r1, [pc, #148]	; (80010e8 <getDateTime+0x2a0>)
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fed6 	bl	8000e04 <BcdByteToStr>
 8001058:	4603      	mov	r3, r0
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f002 fec9 	bl	8003df4 <strcat>
	strcat(buffer, (char*)&":");
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff f8bc 	bl	80001e0 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	4921      	ldr	r1, [pc, #132]	; (80010f8 <getDateTime+0x2b0>)
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	8013      	strh	r3, [r2, #0]
	rtc.minute = atoi(&bufferBcd[0]);
 800107a:	481b      	ldr	r0, [pc, #108]	; (80010e8 <getDateTime+0x2a0>)
 800107c:	f002 fdf6 	bl	8003c6c <atoi>
 8001080:	4603      	mov	r3, r0
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <getDateTime+0x2a8>)
 8001086:	719a      	strb	r2, [r3, #6]

	HAL_I2C_Mem_Read(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_SECOND, 1, (uint8_t*)&rtcRegisterData, sizeof(rtcRegisterData), HAL_MAX_DELAY);
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <getDateTime+0x294>)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	2301      	movs	r3, #1
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	f107 030f 	add.w	r3, r7, #15
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	2200      	movs	r2, #0
 80010a0:	21d0      	movs	r1, #208	; 0xd0
 80010a2:	f000 fdf1 	bl	8001c88 <HAL_I2C_Mem_Read>
	rtcRegisterData &= DS1307_MASK_SECOND;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	73fb      	strb	r3, [r7, #15]
	strcat(buffer, BcdByteToStr(rtcRegisterData, &bufferBcd[0]));
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	490d      	ldr	r1, [pc, #52]	; (80010e8 <getDateTime+0x2a0>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fea5 	bl	8000e04 <BcdByteToStr>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f002 fe98 	bl	8003df4 <strcat>
	rtc.second = atoi(&bufferBcd[0]);
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <getDateTime+0x2a0>)
 80010c6:	f002 fdd1 	bl	8003c6c <atoi>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <getDateTime+0x2a8>)
 80010d0:	71da      	strb	r2, [r3, #7]

	return 0;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200001bc 	.word	0x200001bc
 80010e0:	08004e64 	.word	0x08004e64
 80010e4:	08004e68 	.word	0x08004e68
 80010e8:	20000104 	.word	0x20000104
 80010ec:	08004e6c 	.word	0x08004e6c
 80010f0:	200001ac 	.word	0x200001ac
 80010f4:	08004e70 	.word	0x08004e70
 80010f8:	08004e74 	.word	0x08004e74

080010fc <getDayOfWeek>:
  rtc.dayOfWeekBcd = dow;
  HAL_I2C_Mem_Write(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_DAY_OF_WEEK, 1, (uint8_t*)&rtc.dayOfWeekBcd, sizeof(rtc.dayOfWeekBcd), HAL_MAX_DELAY);
}

uint8_t getDayOfWeek(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af04      	add	r7, sp, #16
  uint8_t rtcRegisterData = 0b00000000;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_DAY_OF_WEEK, 1, (uint8_t*)&rtcRegisterData, sizeof(rtcRegisterData), HAL_MAX_DELAY);
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <getDayOfWeek+0x5c>)
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2301      	movs	r3, #1
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	21d0      	movs	r1, #208	; 0xd0
 800111e:	f000 fdb3 	bl	8001c88 <HAL_I2C_Mem_Read>

  rtcRegisterData &= DS1307_MASK_DAY_OF_WEEK;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	b2db      	uxtb	r3, r3
 800112a:	71fb      	strb	r3, [r7, #7]

  BcdByteToStr(rtcRegisterData, &bufferBcd[0]);
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	490b      	ldr	r1, [pc, #44]	; (800115c <getDayOfWeek+0x60>)
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fe67 	bl	8000e04 <BcdByteToStr>

  rtc.dayOfWeek = atoi(&bufferBcd[0]);
 8001136:	4809      	ldr	r0, [pc, #36]	; (800115c <getDayOfWeek+0x60>)
 8001138:	f002 fd98 	bl	8003c6c <atoi>
 800113c:	4603      	mov	r3, r0
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <getDayOfWeek+0x64>)
 8001142:	711a      	strb	r2, [r3, #4]
  rtc.dayOfWeekBcd = bufferBcd[0];
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <getDayOfWeek+0x60>)
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <getDayOfWeek+0x64>)
 800114a:	731a      	strb	r2, [r3, #12]

  return rtc.dayOfWeek;
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <getDayOfWeek+0x64>)
 800114e:	791b      	ldrb	r3, [r3, #4]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001bc 	.word	0x200001bc
 800115c:	20000104 	.word	0x20000104
 8001160:	200001ac 	.word	0x200001ac

08001164 <getYear>:



uint16_t getYear(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af04      	add	r7, sp, #16
  uint8_t rtcRegisterData = 0b00000000;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]

  HAL_I2C_Mem_Read(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_YEAR, 1, (uint8_t*)&rtcRegisterData, sizeof(rtcRegisterData), HAL_MAX_DELAY);
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <getYear+0x54>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	2206      	movs	r2, #6
 8001184:	21d0      	movs	r1, #208	; 0xd0
 8001186:	f000 fd7f 	bl	8001c88 <HAL_I2C_Mem_Read>
  rtcRegisterData &= DS1307_MASK_YEAR;
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	71fb      	strb	r3, [r7, #7]
  BcdByteToStr(rtcRegisterData, &bufferBcd[0]);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	490a      	ldr	r1, [pc, #40]	; (80011bc <getYear+0x58>)
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fe36 	bl	8000e04 <BcdByteToStr>
  rtc.year = 2000 + atoi(&bufferBcd[0]);
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <getYear+0x58>)
 800119a:	f002 fd67 	bl	8003c6c <atoi>
 800119e:	4603      	mov	r3, r0
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <getYear+0x5c>)
 80011aa:	801a      	strh	r2, [r3, #0]

  return rtc.year;
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <getYear+0x5c>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200001bc 	.word	0x200001bc
 80011bc:	20000104 	.word	0x20000104
 80011c0:	200001ac 	.word	0x200001ac

080011c4 <getMonth>:

uint8_t getMonth(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
  uint8_t rtcRegisterData = 0b00000000;
 80011ca:	2300      	movs	r3, #0
 80011cc:	71fb      	strb	r3, [r7, #7]

  HAL_I2C_Mem_Read(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_MONTH, 1, (uint8_t*)&rtcRegisterData, sizeof(rtcRegisterData), HAL_MAX_DELAY);
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <getMonth+0x54>)
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2205      	movs	r2, #5
 80011e4:	21d0      	movs	r1, #208	; 0xd0
 80011e6:	f000 fd4f 	bl	8001c88 <HAL_I2C_Mem_Read>
  rtcRegisterData &= DS1307_MASK_MONTH;
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	71fb      	strb	r3, [r7, #7]
  BcdByteToStr(rtcRegisterData, &bufferBcd[0]);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4909      	ldr	r1, [pc, #36]	; (800121c <getMonth+0x58>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fe03 	bl	8000e04 <BcdByteToStr>
  rtc.month = atoi(&bufferBcd[0]);
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <getMonth+0x58>)
 8001200:	f002 fd34 	bl	8003c6c <atoi>
 8001204:	4603      	mov	r3, r0
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <getMonth+0x5c>)
 800120a:	709a      	strb	r2, [r3, #2]

  return rtc.month;
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <getMonth+0x5c>)
 800120e:	789b      	ldrb	r3, [r3, #2]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200001bc 	.word	0x200001bc
 800121c:	20000104 	.word	0x20000104
 8001220:	200001ac 	.word	0x200001ac

08001224 <getMonthDay>:

uint8_t getMonthDay(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af04      	add	r7, sp, #16
  uint8_t rtcRegisterData = 0b00000000;
 800122a:	2300      	movs	r3, #0
 800122c:	71fb      	strb	r3, [r7, #7]

  HAL_I2C_Mem_Read(i2cHandle, DS1307_ADDRESS, DS1307_REGISTER_DAY_OF_MONTH, 1, (uint8_t*)&rtcRegisterData, sizeof(rtcRegisterData), HAL_MAX_DELAY);
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <getMonthDay+0x54>)
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	2204      	movs	r2, #4
 8001244:	21d0      	movs	r1, #208	; 0xd0
 8001246:	f000 fd1f 	bl	8001c88 <HAL_I2C_Mem_Read>
  rtcRegisterData &= DS1307_MASK_DAY_OF_MONTH;
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001250:	b2db      	uxtb	r3, r3
 8001252:	71fb      	strb	r3, [r7, #7]
  BcdByteToStr(rtcRegisterData, &bufferBcd[0]);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	4909      	ldr	r1, [pc, #36]	; (800127c <getMonthDay+0x58>)
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fdd3 	bl	8000e04 <BcdByteToStr>

  rtc.dayOfMonth = atoi(&bufferBcd[0]);
 800125e:	4807      	ldr	r0, [pc, #28]	; (800127c <getMonthDay+0x58>)
 8001260:	f002 fd04 	bl	8003c6c <atoi>
 8001264:	4603      	mov	r3, r0
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <getMonthDay+0x5c>)
 800126a:	70da      	strb	r2, [r3, #3]

  return rtc.dayOfMonth;
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <getMonthDay+0x5c>)
 800126e:	78db      	ldrb	r3, [r3, #3]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200001bc 	.word	0x200001bc
 800127c:	20000104 	.word	0x20000104
 8001280:	200001ac 	.word	0x200001ac

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_Init+0x40>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_Init+0x40>)
 800129a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x40>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f94f 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f808 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fbd8 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f967 	bl	80015ba <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f92f 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000070 	.word	0x20000070
 8001320:	20000078 	.word	0x20000078
 8001324:	20000074 	.word	0x20000074

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000078 	.word	0x20000078
 800134c:	200001c0 	.word	0x200001c0

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200001c0 	.word	0x200001c0

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000078 	.word	0x20000078

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff29 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff3e 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff31 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa2 	bl	800150c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff feb6 	bl	8001350 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d008      	beq.n	8001604 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e052      	b.n	80016aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0216 	bic.w	r2, r2, #22
 8001612:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001622:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	2b00      	cmp	r3, #0
 800162a:	d103      	bne.n	8001634 <HAL_DMA_Abort+0x62>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001630:	2b00      	cmp	r3, #0
 8001632:	d007      	beq.n	8001644 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0208 	bic.w	r2, r2, #8
 8001642:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001654:	e013      	b.n	800167e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001656:	f7ff fe7b 	bl	8001350 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b05      	cmp	r3, #5
 8001662:	d90c      	bls.n	800167e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2220      	movs	r2, #32
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2203      	movs	r2, #3
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e015      	b.n	80016aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1e4      	bne.n	8001656 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001690:	223f      	movs	r2, #63	; 0x3f
 8001692:	409a      	lsls	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d004      	beq.n	80016d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e00c      	b.n	80016ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2205      	movs	r2, #5
 80016d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	e159      	b.n	80019c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001714:	2201      	movs	r2, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	429a      	cmp	r2, r3
 800172e:	f040 8148 	bne.w	80019c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b01      	cmp	r3, #1
 800173c:	d005      	beq.n	800174a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	2b02      	cmp	r3, #2
 8001748:	d130      	bne.n	80017ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	2203      	movs	r2, #3
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 0201 	and.w	r2, r3, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d017      	beq.n	80017e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d123      	bne.n	800183c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	220f      	movs	r2, #15
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	08da      	lsrs	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3208      	adds	r2, #8
 8001836:	69b9      	ldr	r1, [r7, #24]
 8001838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0203 	and.w	r2, r3, #3
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80a2 	beq.w	80019c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <HAL_GPIO_Init+0x2e8>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a56      	ldr	r2, [pc, #344]	; (80019e0 <HAL_GPIO_Init+0x2e8>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <HAL_GPIO_Init+0x2e8>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800189a:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_GPIO_Init+0x2ec>)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	220f      	movs	r2, #15
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a49      	ldr	r2, [pc, #292]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d019      	beq.n	80018fa <HAL_GPIO_Init+0x202>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a48      	ldr	r2, [pc, #288]	; (80019ec <HAL_GPIO_Init+0x2f4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0x1fe>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a47      	ldr	r2, [pc, #284]	; (80019f0 <HAL_GPIO_Init+0x2f8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00d      	beq.n	80018f2 <HAL_GPIO_Init+0x1fa>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a46      	ldr	r2, [pc, #280]	; (80019f4 <HAL_GPIO_Init+0x2fc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d007      	beq.n	80018ee <HAL_GPIO_Init+0x1f6>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a45      	ldr	r2, [pc, #276]	; (80019f8 <HAL_GPIO_Init+0x300>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_GPIO_Init+0x1f2>
 80018e6:	2304      	movs	r3, #4
 80018e8:	e008      	b.n	80018fc <HAL_GPIO_Init+0x204>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x204>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e004      	b.n	80018fc <HAL_GPIO_Init+0x204>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e002      	b.n	80018fc <HAL_GPIO_Init+0x204>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_GPIO_Init+0x204>
 80018fa:	2300      	movs	r3, #0
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f002 0203 	and.w	r2, r2, #3
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	4093      	lsls	r3, r2
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800190c:	4935      	ldr	r1, [pc, #212]	; (80019e4 <HAL_GPIO_Init+0x2ec>)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191a:	4b38      	ldr	r3, [pc, #224]	; (80019fc <HAL_GPIO_Init+0x304>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800193e:	4a2f      	ldr	r2, [pc, #188]	; (80019fc <HAL_GPIO_Init+0x304>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_GPIO_Init+0x304>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001968:	4a24      	ldr	r2, [pc, #144]	; (80019fc <HAL_GPIO_Init+0x304>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_GPIO_Init+0x304>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001992:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <HAL_GPIO_Init+0x304>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_GPIO_Init+0x304>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019bc:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <HAL_GPIO_Init+0x304>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3301      	adds	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	f67f aea2 	bls.w	8001714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40013800 	.word	0x40013800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40013c00 	.word	0x40013c00

08001a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e12b      	b.n	8001c6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe fe8c 	bl	8000744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2224      	movs	r2, #36	; 0x24
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a64:	f001 f9da 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 8001a68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4a81      	ldr	r2, [pc, #516]	; (8001c74 <HAL_I2C_Init+0x274>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d807      	bhi.n	8001a84 <HAL_I2C_Init+0x84>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a80      	ldr	r2, [pc, #512]	; (8001c78 <HAL_I2C_Init+0x278>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bf94      	ite	ls
 8001a7c:	2301      	movls	r3, #1
 8001a7e:	2300      	movhi	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e006      	b.n	8001a92 <HAL_I2C_Init+0x92>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4a7d      	ldr	r2, [pc, #500]	; (8001c7c <HAL_I2C_Init+0x27c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	bf94      	ite	ls
 8001a8c:	2301      	movls	r3, #1
 8001a8e:	2300      	movhi	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e0e7      	b.n	8001c6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4a78      	ldr	r2, [pc, #480]	; (8001c80 <HAL_I2C_Init+0x280>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0c9b      	lsrs	r3, r3, #18
 8001aa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a6a      	ldr	r2, [pc, #424]	; (8001c74 <HAL_I2C_Init+0x274>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d802      	bhi.n	8001ad4 <HAL_I2C_Init+0xd4>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	e009      	b.n	8001ae8 <HAL_I2C_Init+0xe8>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	4a69      	ldr	r2, [pc, #420]	; (8001c84 <HAL_I2C_Init+0x284>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	495c      	ldr	r1, [pc, #368]	; (8001c74 <HAL_I2C_Init+0x274>)
 8001b04:	428b      	cmp	r3, r1
 8001b06:	d819      	bhi.n	8001b3c <HAL_I2C_Init+0x13c>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1e59      	subs	r1, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b16:	1c59      	adds	r1, r3, #1
 8001b18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b1c:	400b      	ands	r3, r1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00a      	beq.n	8001b38 <HAL_I2C_Init+0x138>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1e59      	subs	r1, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b36:	e051      	b.n	8001bdc <HAL_I2C_Init+0x1dc>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e04f      	b.n	8001bdc <HAL_I2C_Init+0x1dc>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d111      	bne.n	8001b68 <HAL_I2C_Init+0x168>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1e58      	subs	r0, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e012      	b.n	8001b8e <HAL_I2C_Init+0x18e>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1e58      	subs	r0, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	0099      	lsls	r1, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_Init+0x196>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e022      	b.n	8001bdc <HAL_I2C_Init+0x1dc>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10e      	bne.n	8001bbc <HAL_I2C_Init+0x1bc>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1e58      	subs	r0, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	440b      	add	r3, r1
 8001bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bba:	e00f      	b.n	8001bdc <HAL_I2C_Init+0x1dc>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e58      	subs	r0, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	0099      	lsls	r1, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	6809      	ldr	r1, [r1, #0]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6911      	ldr	r1, [r2, #16]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68d2      	ldr	r2, [r2, #12]
 8001c16:	4311      	orrs	r1, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	000186a0 	.word	0x000186a0
 8001c78:	001e847f 	.word	0x001e847f
 8001c7c:	003d08ff 	.word	0x003d08ff
 8001c80:	431bde83 	.word	0x431bde83
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	4608      	mov	r0, r1
 8001c92:	4611      	mov	r1, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	817b      	strh	r3, [r7, #10]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	813b      	strh	r3, [r7, #8]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ca2:	f7ff fb55 	bl	8001350 <HAL_GetTick>
 8001ca6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	f040 8208 	bne.w	80020c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2319      	movs	r3, #25
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	497b      	ldr	r1, [pc, #492]	; (8001eac <HAL_I2C_Mem_Read+0x224>)
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 faef 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e1fb      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_I2C_Mem_Read+0x56>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e1f4      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d007      	beq.n	8001d04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2222      	movs	r2, #34	; 0x22
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4a5b      	ldr	r2, [pc, #364]	; (8001eb0 <HAL_I2C_Mem_Read+0x228>)
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d46:	88f8      	ldrh	r0, [r7, #6]
 8001d48:	893a      	ldrh	r2, [r7, #8]
 8001d4a:	8979      	ldrh	r1, [r7, #10]
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	4603      	mov	r3, r0
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f9bc 	bl	80020d4 <I2C_RequestMemoryRead>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e1b0      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d113      	bne.n	8001d96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e184      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e164      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d11b      	bne.n	8001e16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	e144      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e2c:	e138      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	f200 80f1 	bhi.w	800201a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d123      	bne.n	8001e88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fb44 	bl	80024d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e139      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e86:	e10b      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d14e      	bne.n	8001f2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e96:	2200      	movs	r2, #0
 8001e98:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <HAL_I2C_Mem_Read+0x22c>)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fa02 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e10e      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
 8001eaa:	bf00      	nop
 8001eac:	00100002 	.word	0x00100002
 8001eb0:	ffff0000 	.word	0xffff0000
 8001eb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f2c:	e0b8      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f34:	2200      	movs	r2, #0
 8001f36:	4966      	ldr	r1, [pc, #408]	; (80020d0 <HAL_I2C_Mem_Read+0x448>)
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f9b3 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0bf      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	2200      	movs	r2, #0
 8001f92:	494f      	ldr	r1, [pc, #316]	; (80020d0 <HAL_I2C_Mem_Read+0x448>)
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f985 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e091      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002018:	e042      	b.n	80020a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fa57 	bl	80024d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e04c      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b04      	cmp	r3, #4
 800206c:	d118      	bne.n	80020a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f47f aec2 	bne.w	8001e2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
  }
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	00010004 	.word	0x00010004

080020d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	4608      	mov	r0, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	817b      	strh	r3, [r7, #10]
 80020e6:	460b      	mov	r3, r1
 80020e8:	813b      	strh	r3, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800210c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	2200      	movs	r2, #0
 8002116:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f8c2 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00d      	beq.n	8002142 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002134:	d103      	bne.n	800213e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0aa      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002142:	897b      	ldrh	r3, [r7, #10]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	4952      	ldr	r1, [pc, #328]	; (80022a0 <I2C_RequestMemoryRead+0x1cc>)
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f8fa 	bl	8002352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e097      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800217e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f964 	bl	8002450 <I2C_WaitOnTXEFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	2b04      	cmp	r3, #4
 8002194:	d107      	bne.n	80021a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e076      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021b0:	893b      	ldrh	r3, [r7, #8]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	e021      	b.n	8002200 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021bc:	893b      	ldrh	r3, [r7, #8]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f93e 	bl	8002450 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d107      	bne.n	80021f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e050      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002202:	6a39      	ldr	r1, [r7, #32]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f923 	bl	8002450 <I2C_WaitOnTXEFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002226:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e035      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	2200      	movs	r2, #0
 8002244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f82b 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00d      	beq.n	8002270 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002262:	d103      	bne.n	800226c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e013      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002270:	897b      	ldrh	r3, [r7, #10]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	6a3a      	ldr	r2, [r7, #32]
 8002284:	4906      	ldr	r1, [pc, #24]	; (80022a0 <I2C_RequestMemoryRead+0x1cc>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f863 	bl	8002352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00010002 	.word	0x00010002

080022a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b4:	e025      	b.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d021      	beq.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7ff f847 	bl	8001350 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d116      	bne.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f043 0220 	orr.w	r2, r3, #32
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e023      	b.n	800234a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d10d      	bne.n	8002328 <I2C_WaitOnFlagUntilTimeout+0x84>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4013      	ands	r3, r2
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	e00c      	b.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4013      	ands	r3, r2
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf0c      	ite	eq
 800233a:	2301      	moveq	r3, #1
 800233c:	2300      	movne	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	429a      	cmp	r2, r3
 8002346:	d0b6      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002360:	e051      	b.n	8002406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002370:	d123      	bne.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002380:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800238a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f043 0204 	orr.w	r2, r3, #4
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e046      	b.n	8002448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d021      	beq.n	8002406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c2:	f7fe ffc5 	bl	8001350 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d302      	bcc.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d116      	bne.n	8002406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f043 0220 	orr.w	r2, r3, #32
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e020      	b.n	8002448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d10c      	bne.n	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4013      	ands	r3, r2
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	e00b      	b.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	43da      	mvns	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d18d      	bne.n	8002362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800245c:	e02d      	b.n	80024ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f88d 	bl	800257e <I2C_IsAcknowledgeFailed>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e02d      	b.n	80024ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d021      	beq.n	80024ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7fe ff6b 	bl	8001350 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d116      	bne.n	80024ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e007      	b.n	80024ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b80      	cmp	r3, #128	; 0x80
 80024c6:	d1ca      	bne.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024de:	e042      	b.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d119      	bne.n	8002522 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f06f 0210 	mvn.w	r2, #16
 80024f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e029      	b.n	8002576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002522:	f7fe ff15 	bl	8001350 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	d302      	bcc.n	8002538 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d116      	bne.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f043 0220 	orr.w	r2, r3, #32
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e007      	b.n	8002576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d1b5      	bne.n	80024e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002594:	d11b      	bne.n	80025ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800259e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f043 0204 	orr.w	r2, r3, #4
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e264      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d075      	beq.n	80026e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fa:	4ba3      	ldr	r3, [pc, #652]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00c      	beq.n	8002620 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002606:	4ba0      	ldr	r3, [pc, #640]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260e:	2b08      	cmp	r3, #8
 8002610:	d112      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b9d      	ldr	r3, [pc, #628]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261e:	d10b      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4b99      	ldr	r3, [pc, #612]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d05b      	beq.n	80026e4 <HAL_RCC_OscConfig+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d157      	bne.n	80026e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e23f      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x74>
 8002642:	4b91      	ldr	r3, [pc, #580]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a90      	ldr	r2, [pc, #576]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e01d      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x98>
 800265a:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a8a      	ldr	r2, [pc, #552]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a87      	ldr	r2, [pc, #540]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002674:	4b84      	ldr	r3, [pc, #528]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a83      	ldr	r2, [pc, #524]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b81      	ldr	r3, [pc, #516]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a80      	ldr	r2, [pc, #512]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fe fe5c 	bl	8001350 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe fe58 	bl	8001350 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e204      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b76      	ldr	r3, [pc, #472]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0xc0>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fe48 	bl	8001350 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c4:	f7fe fe44 	bl	8001350 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1f0      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	4b6c      	ldr	r3, [pc, #432]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0xe8>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d063      	beq.n	80027ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f2:	4b65      	ldr	r3, [pc, #404]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fe:	4b62      	ldr	r3, [pc, #392]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11c      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b5f      	ldr	r3, [pc, #380]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e1c4      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b56      	ldr	r3, [pc, #344]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4952      	ldr	r1, [pc, #328]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	e03a      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274c:	4b4f      	ldr	r3, [pc, #316]	; (800288c <HAL_RCC_OscConfig+0x2b0>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fdfd 	bl	8001350 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275a:	f7fe fdf9 	bl	8001350 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e1a5      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4940      	ldr	r1, [pc, #256]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e015      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_OscConfig+0x2b0>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fddc 	bl	8001350 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279c:	f7fe fdd8 	bl	8001350 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e184      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d030      	beq.n	8002828 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d016      	beq.n	80027fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCC_OscConfig+0x2b4>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe fdbc 	bl	8001350 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027dc:	f7fe fdb8 	bl	8001350 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e164      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x200>
 80027fa:	e015      	b.n	8002828 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_OscConfig+0x2b4>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7fe fda5 	bl	8001350 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280a:	f7fe fda1 	bl	8001350 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e14d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a0 	beq.w	8002976 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_OscConfig+0x2b8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d121      	bne.n	80028b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_RCC_OscConfig+0x2b8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_RCC_OscConfig+0x2b8>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe fd67 	bl	8001350 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e011      	b.n	80028aa <HAL_RCC_OscConfig+0x2ce>
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	42470000 	.word	0x42470000
 8002890:	42470e80 	.word	0x42470e80
 8002894:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe fd5a 	bl	8001350 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e106      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028aa:	4b85      	ldr	r3, [pc, #532]	; (8002ac0 <HAL_RCC_OscConfig+0x4e4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_OscConfig+0x2f0>
 80028be:	4b81      	ldr	r3, [pc, #516]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	4a80      	ldr	r2, [pc, #512]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ca:	e01c      	b.n	8002906 <HAL_RCC_OscConfig+0x32a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d10c      	bne.n	80028ee <HAL_RCC_OscConfig+0x312>
 80028d4:	4b7b      	ldr	r3, [pc, #492]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a7a      	ldr	r2, [pc, #488]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	4b78      	ldr	r3, [pc, #480]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4a77      	ldr	r2, [pc, #476]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6713      	str	r3, [r2, #112]	; 0x70
 80028ec:	e00b      	b.n	8002906 <HAL_RCC_OscConfig+0x32a>
 80028ee:	4b75      	ldr	r3, [pc, #468]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	4a74      	ldr	r2, [pc, #464]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	6713      	str	r3, [r2, #112]	; 0x70
 80028fa:	4b72      	ldr	r3, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a71      	ldr	r2, [pc, #452]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002900:	f023 0304 	bic.w	r3, r3, #4
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d015      	beq.n	800293a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7fe fd1f 	bl	8001350 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	e00a      	b.n	800292c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7fe fd1b 	bl	8001350 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e0c5      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ee      	beq.n	8002916 <HAL_RCC_OscConfig+0x33a>
 8002938:	e014      	b.n	8002964 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293a:	f7fe fd09 	bl	8001350 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002942:	f7fe fd05 	bl	8001350 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0af      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002958:	4b5a      	ldr	r3, [pc, #360]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1ee      	bne.n	8002942 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d105      	bne.n	8002976 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296a:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4a55      	ldr	r2, [pc, #340]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002974:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 809b 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b08      	cmp	r3, #8
 800298a:	d05c      	beq.n	8002a46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d141      	bne.n	8002a18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002994:	4b4c      	ldr	r3, [pc, #304]	; (8002ac8 <HAL_RCC_OscConfig+0x4ec>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe fcd9 	bl	8001350 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe fcd5 	bl	8001350 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e081      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b4:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	019b      	lsls	r3, r3, #6
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	3b01      	subs	r3, #1
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	061b      	lsls	r3, r3, #24
 80029e4:	4937      	ldr	r1, [pc, #220]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCC_OscConfig+0x4ec>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe fcae 	bl	8001350 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe fcaa 	bl	8001350 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e056      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x41c>
 8002a16:	e04e      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_OscConfig+0x4ec>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fc97 	bl	8001350 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe fc93 	bl	8001350 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e03f      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a38:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x44a>
 8002a44:	e037      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e032      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d028      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d121      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d11a      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a82:	4013      	ands	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d111      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	42470060 	.word	0x42470060

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0cc      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d90c      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d044      	beq.n	8002bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d119      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e067      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4934      	ldr	r1, [pc, #208]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fbc8 	bl	8001350 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe fbc4 	bl	8001350 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e04f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d20c      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f821 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fb28 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023c00 	.word	0x40023c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08004e78 	.word	0x08004e78
 8002c90:	20000070 	.word	0x20000070
 8002c94:	20000074 	.word	0x20000074

08002c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	6079      	str	r1, [r7, #4]
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	60f9      	str	r1, [r7, #12]
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002caa:	2100      	movs	r1, #0
 8002cac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cae:	4952      	ldr	r1, [pc, #328]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cb0:	6889      	ldr	r1, [r1, #8]
 8002cb2:	f001 010c 	and.w	r1, r1, #12
 8002cb6:	2908      	cmp	r1, #8
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002cba:	2908      	cmp	r1, #8
 8002cbc:	f200 8094 	bhi.w	8002de8 <HAL_RCC_GetSysClockFreq+0x150>
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	d002      	beq.n	8002cca <HAL_RCC_GetSysClockFreq+0x32>
 8002cc4:	2904      	cmp	r1, #4
 8002cc6:	d003      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x38>
 8002cc8:	e08e      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cca:	4b4c      	ldr	r3, [pc, #304]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x164>)
 8002ccc:	60bb      	str	r3, [r7, #8]
       break;
 8002cce:	e08e      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x168>)
 8002cd2:	60bb      	str	r3, [r7, #8]
      break;
 8002cd4:	e08b      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd6:	4948      	ldr	r1, [pc, #288]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cd8:	6849      	ldr	r1, [r1, #4]
 8002cda:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002cde:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce0:	4945      	ldr	r1, [pc, #276]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ce2:	6849      	ldr	r1, [r1, #4]
 8002ce4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ce8:	2900      	cmp	r1, #0
 8002cea:	d024      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cec:	4942      	ldr	r1, [pc, #264]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cee:	6849      	ldr	r1, [r1, #4]
 8002cf0:	0989      	lsrs	r1, r1, #6
 8002cf2:	4608      	mov	r0, r1
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002cfc:	f04f 0500 	mov.w	r5, #0
 8002d00:	ea00 0204 	and.w	r2, r0, r4
 8002d04:	ea01 0305 	and.w	r3, r1, r5
 8002d08:	493d      	ldr	r1, [pc, #244]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d0a:	fb01 f003 	mul.w	r0, r1, r3
 8002d0e:	2100      	movs	r1, #0
 8002d10:	fb01 f102 	mul.w	r1, r1, r2
 8002d14:	1844      	adds	r4, r0, r1
 8002d16:	493a      	ldr	r1, [pc, #232]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d18:	fba2 0101 	umull	r0, r1, r2, r1
 8002d1c:	1863      	adds	r3, r4, r1
 8002d1e:	4619      	mov	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	f7fd fab2 	bl	8000290 <__aeabi_uldivmod>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4613      	mov	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e04a      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d36:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	ea02 0400 	and.w	r4, r2, r0
 8002d4e:	ea03 0501 	and.w	r5, r3, r1
 8002d52:	4620      	mov	r0, r4
 8002d54:	4629      	mov	r1, r5
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	014b      	lsls	r3, r1, #5
 8002d60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d64:	0142      	lsls	r2, r0, #5
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	1b00      	subs	r0, r0, r4
 8002d6c:	eb61 0105 	sbc.w	r1, r1, r5
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	018b      	lsls	r3, r1, #6
 8002d7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d7e:	0182      	lsls	r2, r0, #6
 8002d80:	1a12      	subs	r2, r2, r0
 8002d82:	eb63 0301 	sbc.w	r3, r3, r1
 8002d86:	f04f 0000 	mov.w	r0, #0
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	00d9      	lsls	r1, r3, #3
 8002d90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d94:	00d0      	lsls	r0, r2, #3
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	1912      	adds	r2, r2, r4
 8002d9c:	eb45 0303 	adc.w	r3, r5, r3
 8002da0:	f04f 0000 	mov.w	r0, #0
 8002da4:	f04f 0100 	mov.w	r1, #0
 8002da8:	0299      	lsls	r1, r3, #10
 8002daa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dae:	0290      	lsls	r0, r2, #10
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	f7fd fa66 	bl	8000290 <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4613      	mov	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	0c1b      	lsrs	r3, r3, #16
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	60bb      	str	r3, [r7, #8]
      break;
 8002de6:	e002      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x164>)
 8002dea:	60bb      	str	r3, [r7, #8]
      break;
 8002dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dee:	68bb      	ldr	r3, [r7, #8]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bdb0      	pop	{r4, r5, r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	017d7840 	.word	0x017d7840

08002e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000070 	.word	0x20000070

08002e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0a9b      	lsrs	r3, r3, #10
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4903      	ldr	r1, [pc, #12]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	08004e88 	.word	0x08004e88

08002e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e48:	f7ff ffdc 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	0b5b      	lsrs	r3, r3, #13
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	4903      	ldr	r1, [pc, #12]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	08004e88 	.word	0x08004e88

08002e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e03f      	b.n	8002efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd ff26 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fd13 	bl	80038dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b08a      	sub	sp, #40	; 0x28
 8002f0a:	af02      	add	r7, sp, #8
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d17c      	bne.n	8003020 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_UART_Transmit+0x2c>
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e075      	b.n	8003022 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_UART_Transmit+0x3e>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e06e      	b.n	8003022 <HAL_UART_Transmit+0x11c>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2221      	movs	r2, #33	; 0x21
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5a:	f7fe f9f9 	bl	8001350 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	88fa      	ldrh	r2, [r7, #6]
 8002f6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d108      	bne.n	8002f88 <HAL_UART_Transmit+0x82>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	e003      	b.n	8002f90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f98:	e02a      	b.n	8002ff0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fad5 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e036      	b.n	8003022 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	3302      	adds	r3, #2
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	e007      	b.n	8002fe2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1cf      	bne.n	8002f9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	2140      	movs	r1, #64	; 0x40
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 faa5 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e006      	b.n	8003022 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b08a      	sub	sp, #40	; 0x28
 800302e:	af02      	add	r7, sp, #8
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b20      	cmp	r3, #32
 8003048:	f040 808c 	bne.w	8003164 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_UART_Receive+0x2e>
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e084      	b.n	8003166 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_UART_Receive+0x40>
 8003066:	2302      	movs	r3, #2
 8003068:	e07d      	b.n	8003166 <HAL_UART_Receive+0x13c>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2222      	movs	r2, #34	; 0x22
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003086:	f7fe f963 	bl	8001350 <HAL_GetTick>
 800308a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	88fa      	ldrh	r2, [r7, #6]
 8003090:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a0:	d108      	bne.n	80030b4 <HAL_UART_Receive+0x8a>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d104      	bne.n	80030b4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	e003      	b.n	80030bc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030c4:	e043      	b.n	800314e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	2120      	movs	r1, #32
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fa3f 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e042      	b.n	8003166 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	3302      	adds	r3, #2
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	e01f      	b.n	8003140 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003108:	d007      	beq.n	800311a <HAL_UART_Receive+0xf0>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <HAL_UART_Receive+0xfe>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e008      	b.n	800313a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003134:	b2da      	uxtb	r2, r3
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3301      	adds	r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1b6      	bne.n	80030c6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	e000      	b.n	8003166 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	4613      	mov	r3, r2
 800317a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b20      	cmp	r3, #32
 8003186:	d11d      	bne.n	80031c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_UART_Receive_IT+0x26>
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e016      	b.n	80031c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Receive_IT+0x38>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e00f      	b.n	80031c6 <HAL_UART_Receive_IT+0x58>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fa14 	bl	80035e8 <UART_Start_Receive_IT>
 80031c0:	4603      	mov	r3, r0
 80031c2:	e000      	b.n	80031c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10d      	bne.n	8003222 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_UART_IRQHandler+0x52>
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fac7 	bl	80037ae <UART_Receive_IT>
      return;
 8003220:	e17c      	b.n	800351c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80b1 	beq.w	800338c <HAL_UART_IRQHandler+0x1bc>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <HAL_UART_IRQHandler+0x70>
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80a6 	beq.w	800338c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_UART_IRQHandler+0x90>
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_UART_IRQHandler+0xb0>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f043 0202 	orr.w	r2, r3, #2
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_UART_IRQHandler+0xd0>
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0204 	orr.w	r2, r3, #4
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00f      	beq.n	80032ca <HAL_UART_IRQHandler+0xfa>
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d104      	bne.n	80032be <HAL_UART_IRQHandler+0xee>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f043 0208 	orr.w	r2, r3, #8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 811f 	beq.w	8003512 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <HAL_UART_IRQHandler+0x11e>
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fa60 	bl	80037ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <HAL_UART_IRQHandler+0x146>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d031      	beq.n	800337a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9a0 	bl	800365c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d123      	bne.n	8003372 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003338:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	2b00      	cmp	r3, #0
 8003340:	d013      	beq.n	800336a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	4a77      	ldr	r2, [pc, #476]	; (8003524 <HAL_UART_IRQHandler+0x354>)
 8003348:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe f9af 	bl	80016b2 <HAL_DMA_Abort_IT>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003364:	4610      	mov	r0, r2
 8003366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	e00e      	b.n	8003388 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fa68 	bl	8000840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	e00a      	b.n	8003388 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fa64 	bl	8000840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003378:	e006      	b.n	8003388 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd fa60 	bl	8000840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003386:	e0c4      	b.n	8003512 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	bf00      	nop
    return;
 800338a:	e0c2      	b.n	8003512 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	2b01      	cmp	r3, #1
 8003392:	f040 80a2 	bne.w	80034da <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 809c 	beq.w	80034da <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8096 	beq.w	80034da <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d14f      	bne.n	8003472 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80033dc:	8a3b      	ldrh	r3, [r7, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8099 	beq.w	8003516 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033e8:	8a3a      	ldrh	r2, [r7, #16]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	f080 8093 	bcs.w	8003516 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8a3a      	ldrh	r2, [r7, #16]
 80033f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003400:	d02b      	beq.n	800345a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003410:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003430:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0210 	bic.w	r2, r2, #16
 800344e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe f8bc 	bl	80015d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003462:	b29b      	uxth	r3, r3
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	b29b      	uxth	r3, r3
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f866 	bl	800353c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003470:	e051      	b.n	8003516 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800347a:	b29b      	uxth	r3, r3
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d047      	beq.n	800351a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800348a:	8a7b      	ldrh	r3, [r7, #18]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d044      	beq.n	800351a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800349e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0210 	bic.w	r2, r2, #16
 80034cc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034ce:	8a7b      	ldrh	r3, [r7, #18]
 80034d0:	4619      	mov	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f832 	bl	800353c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034d8:	e01f      	b.n	800351a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_UART_IRQHandler+0x326>
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8f5 	bl	80036de <UART_Transmit_IT>
    return;
 80034f4:	e012      	b.n	800351c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <HAL_UART_IRQHandler+0x34c>
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f937 	bl	800377e <UART_EndTransmit_IT>
    return;
 8003510:	e004      	b.n	800351c <HAL_UART_IRQHandler+0x34c>
    return;
 8003512:	bf00      	nop
 8003514:	e002      	b.n	800351c <HAL_UART_IRQHandler+0x34c>
      return;
 8003516:	bf00      	nop
 8003518:	e000      	b.n	800351c <HAL_UART_IRQHandler+0x34c>
      return;
 800351a:	bf00      	nop
  }
}
 800351c:	3728      	adds	r7, #40	; 0x28
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	080036b7 	.word	0x080036b7

08003528 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003564:	e02c      	b.n	80035c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d028      	beq.n	80035c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0x30>
 8003574:	f7fd feec 	bl	8001350 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	429a      	cmp	r2, r3
 8003582:	d21d      	bcs.n	80035c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003592:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e00f      	b.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d0c3      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2222      	movs	r2, #34	; 0x22
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0220 	orr.w	r2, r2, #32
 800364c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003672:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	2b01      	cmp	r3, #1
 800368a:	d107      	bne.n	800369c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0210 	bic.w	r2, r2, #16
 800369a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7fd f8b5 	bl	8000840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b21      	cmp	r3, #33	; 0x21
 80036f0:	d13e      	bne.n	8003770 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fa:	d114      	bne.n	8003726 <UART_Transmit_IT+0x48>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d110      	bne.n	8003726 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003718:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	1c9a      	adds	r2, r3, #2
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	621a      	str	r2, [r3, #32]
 8003724:	e008      	b.n	8003738 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	1c59      	adds	r1, r3, #1
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6211      	str	r1, [r2, #32]
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29b      	uxth	r3, r3
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4619      	mov	r1, r3
 8003746:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10f      	bne.n	800376c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800375a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800376a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003794:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fec2 	bl	8003528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b22      	cmp	r3, #34	; 0x22
 80037c0:	f040 8087 	bne.w	80038d2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	d117      	bne.n	80037fe <UART_Receive_IT+0x50>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d113      	bne.n	80037fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	1c9a      	adds	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28
 80037fc:	e026      	b.n	800384c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003810:	d007      	beq.n	8003822 <UART_Receive_IT+0x74>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <UART_Receive_IT+0x82>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e008      	b.n	8003842 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29b      	uxth	r3, r3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4619      	mov	r1, r3
 800385a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800385c:	2b00      	cmp	r3, #0
 800385e:	d136      	bne.n	80038ce <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0220 	bic.w	r2, r2, #32
 800386e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800387e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10e      	bne.n	80038be <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0210 	bic.w	r2, r2, #16
 80038ae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff fe40 	bl	800353c <HAL_UARTEx_RxEventCallback>
 80038bc:	e002      	b.n	80038c4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fc ffe0 	bl	8000884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e002      	b.n	80038d4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	b09f      	sub	sp, #124	; 0x7c
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	68d9      	ldr	r1, [r3, #12]
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	ea40 0301 	orr.w	r3, r0, r1
 80038fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	431a      	orrs	r2, r3
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	431a      	orrs	r2, r3
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4313      	orrs	r3, r2
 8003914:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003920:	f021 010c 	bic.w	r1, r1, #12
 8003924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800392a:	430b      	orrs	r3, r1
 800392c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393a:	6999      	ldr	r1, [r3, #24]
 800393c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	ea40 0301 	orr.w	r3, r0, r1
 8003944:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4bc5      	ldr	r3, [pc, #788]	; (8003c60 <UART_SetConfig+0x384>)
 800394c:	429a      	cmp	r2, r3
 800394e:	d004      	beq.n	800395a <UART_SetConfig+0x7e>
 8003950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4bc3      	ldr	r3, [pc, #780]	; (8003c64 <UART_SetConfig+0x388>)
 8003956:	429a      	cmp	r2, r3
 8003958:	d103      	bne.n	8003962 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800395a:	f7ff fa73 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 800395e:	6778      	str	r0, [r7, #116]	; 0x74
 8003960:	e002      	b.n	8003968 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003962:	f7ff fa5b 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 8003966:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003970:	f040 80b6 	bne.w	8003ae0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003976:	461c      	mov	r4, r3
 8003978:	f04f 0500 	mov.w	r5, #0
 800397c:	4622      	mov	r2, r4
 800397e:	462b      	mov	r3, r5
 8003980:	1891      	adds	r1, r2, r2
 8003982:	6439      	str	r1, [r7, #64]	; 0x40
 8003984:	415b      	adcs	r3, r3
 8003986:	647b      	str	r3, [r7, #68]	; 0x44
 8003988:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800398c:	1912      	adds	r2, r2, r4
 800398e:	eb45 0303 	adc.w	r3, r5, r3
 8003992:	f04f 0000 	mov.w	r0, #0
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	00d9      	lsls	r1, r3, #3
 800399c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039a0:	00d0      	lsls	r0, r2, #3
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	1911      	adds	r1, r2, r4
 80039a8:	6639      	str	r1, [r7, #96]	; 0x60
 80039aa:	416b      	adcs	r3, r5
 80039ac:	667b      	str	r3, [r7, #100]	; 0x64
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	1891      	adds	r1, r2, r2
 80039ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80039bc:	415b      	adcs	r3, r3
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80039c8:	f7fc fc62 	bl	8000290 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4ba5      	ldr	r3, [pc, #660]	; (8003c68 <UART_SetConfig+0x38c>)
 80039d2:	fba3 2302 	umull	r2, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	011e      	lsls	r6, r3, #4
 80039da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039dc:	461c      	mov	r4, r3
 80039de:	f04f 0500 	mov.w	r5, #0
 80039e2:	4622      	mov	r2, r4
 80039e4:	462b      	mov	r3, r5
 80039e6:	1891      	adds	r1, r2, r2
 80039e8:	6339      	str	r1, [r7, #48]	; 0x30
 80039ea:	415b      	adcs	r3, r3
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
 80039ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039f2:	1912      	adds	r2, r2, r4
 80039f4:	eb45 0303 	adc.w	r3, r5, r3
 80039f8:	f04f 0000 	mov.w	r0, #0
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	00d9      	lsls	r1, r3, #3
 8003a02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a06:	00d0      	lsls	r0, r2, #3
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	1911      	adds	r1, r2, r4
 8003a0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a10:	416b      	adcs	r3, r5
 8003a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	1891      	adds	r1, r2, r2
 8003a20:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a22:	415b      	adcs	r3, r3
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a2e:	f7fc fc2f 	bl	8000290 <__aeabi_uldivmod>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4b8c      	ldr	r3, [pc, #560]	; (8003c68 <UART_SetConfig+0x38c>)
 8003a38:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	2164      	movs	r1, #100	; 0x64
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	3332      	adds	r3, #50	; 0x32
 8003a4a:	4a87      	ldr	r2, [pc, #540]	; (8003c68 <UART_SetConfig+0x38c>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a58:	441e      	add	r6, r3
 8003a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	1894      	adds	r4, r2, r2
 8003a68:	623c      	str	r4, [r7, #32]
 8003a6a:	415b      	adcs	r3, r3
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a72:	1812      	adds	r2, r2, r0
 8003a74:	eb41 0303 	adc.w	r3, r1, r3
 8003a78:	f04f 0400 	mov.w	r4, #0
 8003a7c:	f04f 0500 	mov.w	r5, #0
 8003a80:	00dd      	lsls	r5, r3, #3
 8003a82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a86:	00d4      	lsls	r4, r2, #3
 8003a88:	4622      	mov	r2, r4
 8003a8a:	462b      	mov	r3, r5
 8003a8c:	1814      	adds	r4, r2, r0
 8003a8e:	653c      	str	r4, [r7, #80]	; 0x50
 8003a90:	414b      	adcs	r3, r1
 8003a92:	657b      	str	r3, [r7, #84]	; 0x54
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	1891      	adds	r1, r2, r2
 8003aa0:	61b9      	str	r1, [r7, #24]
 8003aa2:	415b      	adcs	r3, r3
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aaa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003aae:	f7fc fbef 	bl	8000290 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4b6c      	ldr	r3, [pc, #432]	; (8003c68 <UART_SetConfig+0x38c>)
 8003ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	2164      	movs	r1, #100	; 0x64
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	3332      	adds	r3, #50	; 0x32
 8003aca:	4a67      	ldr	r2, [pc, #412]	; (8003c68 <UART_SetConfig+0x38c>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	f003 0207 	and.w	r2, r3, #7
 8003ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4432      	add	r2, r6
 8003adc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ade:	e0b9      	b.n	8003c54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae2:	461c      	mov	r4, r3
 8003ae4:	f04f 0500 	mov.w	r5, #0
 8003ae8:	4622      	mov	r2, r4
 8003aea:	462b      	mov	r3, r5
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	6139      	str	r1, [r7, #16]
 8003af0:	415b      	adcs	r3, r3
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003af8:	1912      	adds	r2, r2, r4
 8003afa:	eb45 0303 	adc.w	r3, r5, r3
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	00d9      	lsls	r1, r3, #3
 8003b08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b0c:	00d0      	lsls	r0, r2, #3
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	eb12 0804 	adds.w	r8, r2, r4
 8003b16:	eb43 0905 	adc.w	r9, r3, r5
 8003b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f04f 0100 	mov.w	r1, #0
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	008b      	lsls	r3, r1, #2
 8003b2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b32:	0082      	lsls	r2, r0, #2
 8003b34:	4640      	mov	r0, r8
 8003b36:	4649      	mov	r1, r9
 8003b38:	f7fc fbaa 	bl	8000290 <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <UART_SetConfig+0x38c>)
 8003b42:	fba3 2302 	umull	r2, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	011e      	lsls	r6, r3, #4
 8003b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	1894      	adds	r4, r2, r2
 8003b58:	60bc      	str	r4, [r7, #8]
 8003b5a:	415b      	adcs	r3, r3
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b62:	1812      	adds	r2, r2, r0
 8003b64:	eb41 0303 	adc.w	r3, r1, r3
 8003b68:	f04f 0400 	mov.w	r4, #0
 8003b6c:	f04f 0500 	mov.w	r5, #0
 8003b70:	00dd      	lsls	r5, r3, #3
 8003b72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b76:	00d4      	lsls	r4, r2, #3
 8003b78:	4622      	mov	r2, r4
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	1814      	adds	r4, r2, r0
 8003b7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b80:	414b      	adcs	r3, r1
 8003b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	008b      	lsls	r3, r1, #2
 8003b98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b9c:	0082      	lsls	r2, r0, #2
 8003b9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ba2:	f7fc fb75 	bl	8000290 <__aeabi_uldivmod>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <UART_SetConfig+0x38c>)
 8003bac:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	2164      	movs	r1, #100	; 0x64
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	3332      	adds	r3, #50	; 0x32
 8003bbe:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <UART_SetConfig+0x38c>)
 8003bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bca:	441e      	add	r6, r3
 8003bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	1894      	adds	r4, r2, r2
 8003bda:	603c      	str	r4, [r7, #0]
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003be4:	1812      	adds	r2, r2, r0
 8003be6:	eb41 0303 	adc.w	r3, r1, r3
 8003bea:	f04f 0400 	mov.w	r4, #0
 8003bee:	f04f 0500 	mov.w	r5, #0
 8003bf2:	00dd      	lsls	r5, r3, #3
 8003bf4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bf8:	00d4      	lsls	r4, r2, #3
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	eb12 0a00 	adds.w	sl, r2, r0
 8003c02:	eb43 0b01 	adc.w	fp, r3, r1
 8003c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	008b      	lsls	r3, r1, #2
 8003c1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c1e:	0082      	lsls	r2, r0, #2
 8003c20:	4650      	mov	r0, sl
 8003c22:	4659      	mov	r1, fp
 8003c24:	f7fc fb34 	bl	8000290 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <UART_SetConfig+0x38c>)
 8003c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	2164      	movs	r1, #100	; 0x64
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	3332      	adds	r3, #50	; 0x32
 8003c40:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <UART_SetConfig+0x38c>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4432      	add	r2, r6
 8003c52:	609a      	str	r2, [r3, #8]
}
 8003c54:	bf00      	nop
 8003c56:	377c      	adds	r7, #124	; 0x7c
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	40011000 	.word	0x40011000
 8003c64:	40011400 	.word	0x40011400
 8003c68:	51eb851f 	.word	0x51eb851f

08003c6c <atoi>:
 8003c6c:	220a      	movs	r2, #10
 8003c6e:	2100      	movs	r1, #0
 8003c70:	f000 b954 	b.w	8003f1c <strtol>

08003c74 <__errno>:
 8003c74:	4b01      	ldr	r3, [pc, #4]	; (8003c7c <__errno+0x8>)
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	2000007c 	.word	0x2000007c

08003c80 <__libc_init_array>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	4d0d      	ldr	r5, [pc, #52]	; (8003cb8 <__libc_init_array+0x38>)
 8003c84:	4c0d      	ldr	r4, [pc, #52]	; (8003cbc <__libc_init_array+0x3c>)
 8003c86:	1b64      	subs	r4, r4, r5
 8003c88:	10a4      	asrs	r4, r4, #2
 8003c8a:	2600      	movs	r6, #0
 8003c8c:	42a6      	cmp	r6, r4
 8003c8e:	d109      	bne.n	8003ca4 <__libc_init_array+0x24>
 8003c90:	4d0b      	ldr	r5, [pc, #44]	; (8003cc0 <__libc_init_array+0x40>)
 8003c92:	4c0c      	ldr	r4, [pc, #48]	; (8003cc4 <__libc_init_array+0x44>)
 8003c94:	f001 f88a 	bl	8004dac <_init>
 8003c98:	1b64      	subs	r4, r4, r5
 8003c9a:	10a4      	asrs	r4, r4, #2
 8003c9c:	2600      	movs	r6, #0
 8003c9e:	42a6      	cmp	r6, r4
 8003ca0:	d105      	bne.n	8003cae <__libc_init_array+0x2e>
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca8:	4798      	blx	r3
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7ee      	b.n	8003c8c <__libc_init_array+0xc>
 8003cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb2:	4798      	blx	r3
 8003cb4:	3601      	adds	r6, #1
 8003cb6:	e7f2      	b.n	8003c9e <__libc_init_array+0x1e>
 8003cb8:	08005034 	.word	0x08005034
 8003cbc:	08005034 	.word	0x08005034
 8003cc0:	08005034 	.word	0x08005034
 8003cc4:	08005038 	.word	0x08005038

08003cc8 <memset>:
 8003cc8:	4402      	add	r2, r0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d100      	bne.n	8003cd2 <memset+0xa>
 8003cd0:	4770      	bx	lr
 8003cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd6:	e7f9      	b.n	8003ccc <memset+0x4>

08003cd8 <iprintf>:
 8003cd8:	b40f      	push	{r0, r1, r2, r3}
 8003cda:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <iprintf+0x2c>)
 8003cdc:	b513      	push	{r0, r1, r4, lr}
 8003cde:	681c      	ldr	r4, [r3, #0]
 8003ce0:	b124      	cbz	r4, 8003cec <iprintf+0x14>
 8003ce2:	69a3      	ldr	r3, [r4, #24]
 8003ce4:	b913      	cbnz	r3, 8003cec <iprintf+0x14>
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f000 fafc 	bl	80042e4 <__sinit>
 8003cec:	ab05      	add	r3, sp, #20
 8003cee:	9a04      	ldr	r2, [sp, #16]
 8003cf0:	68a1      	ldr	r1, [r4, #8]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f000 fccd 	bl	8004694 <_vfiprintf_r>
 8003cfa:	b002      	add	sp, #8
 8003cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d00:	b004      	add	sp, #16
 8003d02:	4770      	bx	lr
 8003d04:	2000007c 	.word	0x2000007c

08003d08 <_puts_r>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	460e      	mov	r6, r1
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	b118      	cbz	r0, 8003d18 <_puts_r+0x10>
 8003d10:	6983      	ldr	r3, [r0, #24]
 8003d12:	b90b      	cbnz	r3, 8003d18 <_puts_r+0x10>
 8003d14:	f000 fae6 	bl	80042e4 <__sinit>
 8003d18:	69ab      	ldr	r3, [r5, #24]
 8003d1a:	68ac      	ldr	r4, [r5, #8]
 8003d1c:	b913      	cbnz	r3, 8003d24 <_puts_r+0x1c>
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f000 fae0 	bl	80042e4 <__sinit>
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <_puts_r+0xd0>)
 8003d26:	429c      	cmp	r4, r3
 8003d28:	d120      	bne.n	8003d6c <_puts_r+0x64>
 8003d2a:	686c      	ldr	r4, [r5, #4]
 8003d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d2e:	07db      	lsls	r3, r3, #31
 8003d30:	d405      	bmi.n	8003d3e <_puts_r+0x36>
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	0598      	lsls	r0, r3, #22
 8003d36:	d402      	bmi.n	8003d3e <_puts_r+0x36>
 8003d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d3a:	f000 fb71 	bl	8004420 <__retarget_lock_acquire_recursive>
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	0719      	lsls	r1, r3, #28
 8003d42:	d51d      	bpl.n	8003d80 <_puts_r+0x78>
 8003d44:	6923      	ldr	r3, [r4, #16]
 8003d46:	b1db      	cbz	r3, 8003d80 <_puts_r+0x78>
 8003d48:	3e01      	subs	r6, #1
 8003d4a:	68a3      	ldr	r3, [r4, #8]
 8003d4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d50:	3b01      	subs	r3, #1
 8003d52:	60a3      	str	r3, [r4, #8]
 8003d54:	bb39      	cbnz	r1, 8003da6 <_puts_r+0x9e>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da38      	bge.n	8003dcc <_puts_r+0xc4>
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	210a      	movs	r1, #10
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f000 f8e6 	bl	8003f30 <__swbuf_r>
 8003d64:	3001      	adds	r0, #1
 8003d66:	d011      	beq.n	8003d8c <_puts_r+0x84>
 8003d68:	250a      	movs	r5, #10
 8003d6a:	e011      	b.n	8003d90 <_puts_r+0x88>
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <_puts_r+0xd4>)
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	d101      	bne.n	8003d76 <_puts_r+0x6e>
 8003d72:	68ac      	ldr	r4, [r5, #8]
 8003d74:	e7da      	b.n	8003d2c <_puts_r+0x24>
 8003d76:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <_puts_r+0xd8>)
 8003d78:	429c      	cmp	r4, r3
 8003d7a:	bf08      	it	eq
 8003d7c:	68ec      	ldreq	r4, [r5, #12]
 8003d7e:	e7d5      	b.n	8003d2c <_puts_r+0x24>
 8003d80:	4621      	mov	r1, r4
 8003d82:	4628      	mov	r0, r5
 8003d84:	f000 f926 	bl	8003fd4 <__swsetup_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d0dd      	beq.n	8003d48 <_puts_r+0x40>
 8003d8c:	f04f 35ff 	mov.w	r5, #4294967295
 8003d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d92:	07da      	lsls	r2, r3, #31
 8003d94:	d405      	bmi.n	8003da2 <_puts_r+0x9a>
 8003d96:	89a3      	ldrh	r3, [r4, #12]
 8003d98:	059b      	lsls	r3, r3, #22
 8003d9a:	d402      	bmi.n	8003da2 <_puts_r+0x9a>
 8003d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d9e:	f000 fb40 	bl	8004422 <__retarget_lock_release_recursive>
 8003da2:	4628      	mov	r0, r5
 8003da4:	bd70      	pop	{r4, r5, r6, pc}
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	da04      	bge.n	8003db4 <_puts_r+0xac>
 8003daa:	69a2      	ldr	r2, [r4, #24]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	dc06      	bgt.n	8003dbe <_puts_r+0xb6>
 8003db0:	290a      	cmp	r1, #10
 8003db2:	d004      	beq.n	8003dbe <_puts_r+0xb6>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	6022      	str	r2, [r4, #0]
 8003dba:	7019      	strb	r1, [r3, #0]
 8003dbc:	e7c5      	b.n	8003d4a <_puts_r+0x42>
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f000 f8b5 	bl	8003f30 <__swbuf_r>
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d1bf      	bne.n	8003d4a <_puts_r+0x42>
 8003dca:	e7df      	b.n	8003d8c <_puts_r+0x84>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	250a      	movs	r5, #10
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	6022      	str	r2, [r4, #0]
 8003dd4:	701d      	strb	r5, [r3, #0]
 8003dd6:	e7db      	b.n	8003d90 <_puts_r+0x88>
 8003dd8:	08004fb8 	.word	0x08004fb8
 8003ddc:	08004fd8 	.word	0x08004fd8
 8003de0:	08004f98 	.word	0x08004f98

08003de4 <puts>:
 8003de4:	4b02      	ldr	r3, [pc, #8]	; (8003df0 <puts+0xc>)
 8003de6:	4601      	mov	r1, r0
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	f7ff bf8d 	b.w	8003d08 <_puts_r>
 8003dee:	bf00      	nop
 8003df0:	2000007c 	.word	0x2000007c

08003df4 <strcat>:
 8003df4:	b510      	push	{r4, lr}
 8003df6:	4602      	mov	r2, r0
 8003df8:	7814      	ldrb	r4, [r2, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	3201      	adds	r2, #1
 8003dfe:	2c00      	cmp	r4, #0
 8003e00:	d1fa      	bne.n	8003df8 <strcat+0x4>
 8003e02:	3b01      	subs	r3, #1
 8003e04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e0c:	2a00      	cmp	r2, #0
 8003e0e:	d1f9      	bne.n	8003e04 <strcat+0x10>
 8003e10:	bd10      	pop	{r4, pc}
	...

08003e14 <_strtol_l.isra.0>:
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e1a:	d001      	beq.n	8003e20 <_strtol_l.isra.0+0xc>
 8003e1c:	2b24      	cmp	r3, #36	; 0x24
 8003e1e:	d906      	bls.n	8003e2e <_strtol_l.isra.0+0x1a>
 8003e20:	f7ff ff28 	bl	8003c74 <__errno>
 8003e24:	2316      	movs	r3, #22
 8003e26:	6003      	str	r3, [r0, #0]
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2e:	4f3a      	ldr	r7, [pc, #232]	; (8003f18 <_strtol_l.isra.0+0x104>)
 8003e30:	468e      	mov	lr, r1
 8003e32:	4676      	mov	r6, lr
 8003e34:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003e38:	5de5      	ldrb	r5, [r4, r7]
 8003e3a:	f015 0508 	ands.w	r5, r5, #8
 8003e3e:	d1f8      	bne.n	8003e32 <_strtol_l.isra.0+0x1e>
 8003e40:	2c2d      	cmp	r4, #45	; 0x2d
 8003e42:	d134      	bne.n	8003eae <_strtol_l.isra.0+0x9a>
 8003e44:	f89e 4000 	ldrb.w	r4, [lr]
 8003e48:	f04f 0801 	mov.w	r8, #1
 8003e4c:	f106 0e02 	add.w	lr, r6, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d05c      	beq.n	8003f0e <_strtol_l.isra.0+0xfa>
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d10c      	bne.n	8003e72 <_strtol_l.isra.0+0x5e>
 8003e58:	2c30      	cmp	r4, #48	; 0x30
 8003e5a:	d10a      	bne.n	8003e72 <_strtol_l.isra.0+0x5e>
 8003e5c:	f89e 4000 	ldrb.w	r4, [lr]
 8003e60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003e64:	2c58      	cmp	r4, #88	; 0x58
 8003e66:	d14d      	bne.n	8003f04 <_strtol_l.isra.0+0xf0>
 8003e68:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	f10e 0e02 	add.w	lr, lr, #2
 8003e72:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003e76:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	fbbc f9f3 	udiv	r9, ip, r3
 8003e80:	4635      	mov	r5, r6
 8003e82:	fb03 ca19 	mls	sl, r3, r9, ip
 8003e86:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003e8a:	2f09      	cmp	r7, #9
 8003e8c:	d818      	bhi.n	8003ec0 <_strtol_l.isra.0+0xac>
 8003e8e:	463c      	mov	r4, r7
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	dd24      	ble.n	8003ede <_strtol_l.isra.0+0xca>
 8003e94:	2e00      	cmp	r6, #0
 8003e96:	db1f      	blt.n	8003ed8 <_strtol_l.isra.0+0xc4>
 8003e98:	45a9      	cmp	r9, r5
 8003e9a:	d31d      	bcc.n	8003ed8 <_strtol_l.isra.0+0xc4>
 8003e9c:	d101      	bne.n	8003ea2 <_strtol_l.isra.0+0x8e>
 8003e9e:	45a2      	cmp	sl, r4
 8003ea0:	db1a      	blt.n	8003ed8 <_strtol_l.isra.0+0xc4>
 8003ea2:	fb05 4503 	mla	r5, r5, r3, r4
 8003ea6:	2601      	movs	r6, #1
 8003ea8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003eac:	e7eb      	b.n	8003e86 <_strtol_l.isra.0+0x72>
 8003eae:	2c2b      	cmp	r4, #43	; 0x2b
 8003eb0:	bf08      	it	eq
 8003eb2:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003eb6:	46a8      	mov	r8, r5
 8003eb8:	bf08      	it	eq
 8003eba:	f106 0e02 	addeq.w	lr, r6, #2
 8003ebe:	e7c7      	b.n	8003e50 <_strtol_l.isra.0+0x3c>
 8003ec0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003ec4:	2f19      	cmp	r7, #25
 8003ec6:	d801      	bhi.n	8003ecc <_strtol_l.isra.0+0xb8>
 8003ec8:	3c37      	subs	r4, #55	; 0x37
 8003eca:	e7e1      	b.n	8003e90 <_strtol_l.isra.0+0x7c>
 8003ecc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003ed0:	2f19      	cmp	r7, #25
 8003ed2:	d804      	bhi.n	8003ede <_strtol_l.isra.0+0xca>
 8003ed4:	3c57      	subs	r4, #87	; 0x57
 8003ed6:	e7db      	b.n	8003e90 <_strtol_l.isra.0+0x7c>
 8003ed8:	f04f 36ff 	mov.w	r6, #4294967295
 8003edc:	e7e4      	b.n	8003ea8 <_strtol_l.isra.0+0x94>
 8003ede:	2e00      	cmp	r6, #0
 8003ee0:	da05      	bge.n	8003eee <_strtol_l.isra.0+0xda>
 8003ee2:	2322      	movs	r3, #34	; 0x22
 8003ee4:	6003      	str	r3, [r0, #0]
 8003ee6:	4665      	mov	r5, ip
 8003ee8:	b942      	cbnz	r2, 8003efc <_strtol_l.isra.0+0xe8>
 8003eea:	4628      	mov	r0, r5
 8003eec:	e79d      	b.n	8003e2a <_strtol_l.isra.0+0x16>
 8003eee:	f1b8 0f00 	cmp.w	r8, #0
 8003ef2:	d000      	beq.n	8003ef6 <_strtol_l.isra.0+0xe2>
 8003ef4:	426d      	negs	r5, r5
 8003ef6:	2a00      	cmp	r2, #0
 8003ef8:	d0f7      	beq.n	8003eea <_strtol_l.isra.0+0xd6>
 8003efa:	b10e      	cbz	r6, 8003f00 <_strtol_l.isra.0+0xec>
 8003efc:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003f00:	6011      	str	r1, [r2, #0]
 8003f02:	e7f2      	b.n	8003eea <_strtol_l.isra.0+0xd6>
 8003f04:	2430      	movs	r4, #48	; 0x30
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1b3      	bne.n	8003e72 <_strtol_l.isra.0+0x5e>
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	e7b1      	b.n	8003e72 <_strtol_l.isra.0+0x5e>
 8003f0e:	2c30      	cmp	r4, #48	; 0x30
 8003f10:	d0a4      	beq.n	8003e5c <_strtol_l.isra.0+0x48>
 8003f12:	230a      	movs	r3, #10
 8003f14:	e7ad      	b.n	8003e72 <_strtol_l.isra.0+0x5e>
 8003f16:	bf00      	nop
 8003f18:	08004e95 	.word	0x08004e95

08003f1c <strtol>:
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	460a      	mov	r2, r1
 8003f20:	4601      	mov	r1, r0
 8003f22:	4802      	ldr	r0, [pc, #8]	; (8003f2c <strtol+0x10>)
 8003f24:	6800      	ldr	r0, [r0, #0]
 8003f26:	f7ff bf75 	b.w	8003e14 <_strtol_l.isra.0>
 8003f2a:	bf00      	nop
 8003f2c:	2000007c 	.word	0x2000007c

08003f30 <__swbuf_r>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	460e      	mov	r6, r1
 8003f34:	4614      	mov	r4, r2
 8003f36:	4605      	mov	r5, r0
 8003f38:	b118      	cbz	r0, 8003f42 <__swbuf_r+0x12>
 8003f3a:	6983      	ldr	r3, [r0, #24]
 8003f3c:	b90b      	cbnz	r3, 8003f42 <__swbuf_r+0x12>
 8003f3e:	f000 f9d1 	bl	80042e4 <__sinit>
 8003f42:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <__swbuf_r+0x98>)
 8003f44:	429c      	cmp	r4, r3
 8003f46:	d12b      	bne.n	8003fa0 <__swbuf_r+0x70>
 8003f48:	686c      	ldr	r4, [r5, #4]
 8003f4a:	69a3      	ldr	r3, [r4, #24]
 8003f4c:	60a3      	str	r3, [r4, #8]
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	071a      	lsls	r2, r3, #28
 8003f52:	d52f      	bpl.n	8003fb4 <__swbuf_r+0x84>
 8003f54:	6923      	ldr	r3, [r4, #16]
 8003f56:	b36b      	cbz	r3, 8003fb4 <__swbuf_r+0x84>
 8003f58:	6923      	ldr	r3, [r4, #16]
 8003f5a:	6820      	ldr	r0, [r4, #0]
 8003f5c:	1ac0      	subs	r0, r0, r3
 8003f5e:	6963      	ldr	r3, [r4, #20]
 8003f60:	b2f6      	uxtb	r6, r6
 8003f62:	4283      	cmp	r3, r0
 8003f64:	4637      	mov	r7, r6
 8003f66:	dc04      	bgt.n	8003f72 <__swbuf_r+0x42>
 8003f68:	4621      	mov	r1, r4
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 f926 	bl	80041bc <_fflush_r>
 8003f70:	bb30      	cbnz	r0, 8003fc0 <__swbuf_r+0x90>
 8003f72:	68a3      	ldr	r3, [r4, #8]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	60a3      	str	r3, [r4, #8]
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	6022      	str	r2, [r4, #0]
 8003f7e:	701e      	strb	r6, [r3, #0]
 8003f80:	6963      	ldr	r3, [r4, #20]
 8003f82:	3001      	adds	r0, #1
 8003f84:	4283      	cmp	r3, r0
 8003f86:	d004      	beq.n	8003f92 <__swbuf_r+0x62>
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	07db      	lsls	r3, r3, #31
 8003f8c:	d506      	bpl.n	8003f9c <__swbuf_r+0x6c>
 8003f8e:	2e0a      	cmp	r6, #10
 8003f90:	d104      	bne.n	8003f9c <__swbuf_r+0x6c>
 8003f92:	4621      	mov	r1, r4
 8003f94:	4628      	mov	r0, r5
 8003f96:	f000 f911 	bl	80041bc <_fflush_r>
 8003f9a:	b988      	cbnz	r0, 8003fc0 <__swbuf_r+0x90>
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <__swbuf_r+0x9c>)
 8003fa2:	429c      	cmp	r4, r3
 8003fa4:	d101      	bne.n	8003faa <__swbuf_r+0x7a>
 8003fa6:	68ac      	ldr	r4, [r5, #8]
 8003fa8:	e7cf      	b.n	8003f4a <__swbuf_r+0x1a>
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <__swbuf_r+0xa0>)
 8003fac:	429c      	cmp	r4, r3
 8003fae:	bf08      	it	eq
 8003fb0:	68ec      	ldreq	r4, [r5, #12]
 8003fb2:	e7ca      	b.n	8003f4a <__swbuf_r+0x1a>
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f000 f80c 	bl	8003fd4 <__swsetup_r>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d0cb      	beq.n	8003f58 <__swbuf_r+0x28>
 8003fc0:	f04f 37ff 	mov.w	r7, #4294967295
 8003fc4:	e7ea      	b.n	8003f9c <__swbuf_r+0x6c>
 8003fc6:	bf00      	nop
 8003fc8:	08004fb8 	.word	0x08004fb8
 8003fcc:	08004fd8 	.word	0x08004fd8
 8003fd0:	08004f98 	.word	0x08004f98

08003fd4 <__swsetup_r>:
 8003fd4:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <__swsetup_r+0xcc>)
 8003fd6:	b570      	push	{r4, r5, r6, lr}
 8003fd8:	681d      	ldr	r5, [r3, #0]
 8003fda:	4606      	mov	r6, r0
 8003fdc:	460c      	mov	r4, r1
 8003fde:	b125      	cbz	r5, 8003fea <__swsetup_r+0x16>
 8003fe0:	69ab      	ldr	r3, [r5, #24]
 8003fe2:	b913      	cbnz	r3, 8003fea <__swsetup_r+0x16>
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f000 f97d 	bl	80042e4 <__sinit>
 8003fea:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <__swsetup_r+0xd0>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	d10f      	bne.n	8004010 <__swsetup_r+0x3c>
 8003ff0:	686c      	ldr	r4, [r5, #4]
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ff8:	0719      	lsls	r1, r3, #28
 8003ffa:	d42c      	bmi.n	8004056 <__swsetup_r+0x82>
 8003ffc:	06dd      	lsls	r5, r3, #27
 8003ffe:	d411      	bmi.n	8004024 <__swsetup_r+0x50>
 8004000:	2309      	movs	r3, #9
 8004002:	6033      	str	r3, [r6, #0]
 8004004:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004008:	81a3      	strh	r3, [r4, #12]
 800400a:	f04f 30ff 	mov.w	r0, #4294967295
 800400e:	e03e      	b.n	800408e <__swsetup_r+0xba>
 8004010:	4b25      	ldr	r3, [pc, #148]	; (80040a8 <__swsetup_r+0xd4>)
 8004012:	429c      	cmp	r4, r3
 8004014:	d101      	bne.n	800401a <__swsetup_r+0x46>
 8004016:	68ac      	ldr	r4, [r5, #8]
 8004018:	e7eb      	b.n	8003ff2 <__swsetup_r+0x1e>
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <__swsetup_r+0xd8>)
 800401c:	429c      	cmp	r4, r3
 800401e:	bf08      	it	eq
 8004020:	68ec      	ldreq	r4, [r5, #12]
 8004022:	e7e6      	b.n	8003ff2 <__swsetup_r+0x1e>
 8004024:	0758      	lsls	r0, r3, #29
 8004026:	d512      	bpl.n	800404e <__swsetup_r+0x7a>
 8004028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800402a:	b141      	cbz	r1, 800403e <__swsetup_r+0x6a>
 800402c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004030:	4299      	cmp	r1, r3
 8004032:	d002      	beq.n	800403a <__swsetup_r+0x66>
 8004034:	4630      	mov	r0, r6
 8004036:	f000 fa59 	bl	80044ec <_free_r>
 800403a:	2300      	movs	r3, #0
 800403c:	6363      	str	r3, [r4, #52]	; 0x34
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	2300      	movs	r3, #0
 8004048:	6063      	str	r3, [r4, #4]
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	f043 0308 	orr.w	r3, r3, #8
 8004054:	81a3      	strh	r3, [r4, #12]
 8004056:	6923      	ldr	r3, [r4, #16]
 8004058:	b94b      	cbnz	r3, 800406e <__swsetup_r+0x9a>
 800405a:	89a3      	ldrh	r3, [r4, #12]
 800405c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004064:	d003      	beq.n	800406e <__swsetup_r+0x9a>
 8004066:	4621      	mov	r1, r4
 8004068:	4630      	mov	r0, r6
 800406a:	f000 f9ff 	bl	800446c <__smakebuf_r>
 800406e:	89a0      	ldrh	r0, [r4, #12]
 8004070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004074:	f010 0301 	ands.w	r3, r0, #1
 8004078:	d00a      	beq.n	8004090 <__swsetup_r+0xbc>
 800407a:	2300      	movs	r3, #0
 800407c:	60a3      	str	r3, [r4, #8]
 800407e:	6963      	ldr	r3, [r4, #20]
 8004080:	425b      	negs	r3, r3
 8004082:	61a3      	str	r3, [r4, #24]
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	b943      	cbnz	r3, 800409a <__swsetup_r+0xc6>
 8004088:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800408c:	d1ba      	bne.n	8004004 <__swsetup_r+0x30>
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	0781      	lsls	r1, r0, #30
 8004092:	bf58      	it	pl
 8004094:	6963      	ldrpl	r3, [r4, #20]
 8004096:	60a3      	str	r3, [r4, #8]
 8004098:	e7f4      	b.n	8004084 <__swsetup_r+0xb0>
 800409a:	2000      	movs	r0, #0
 800409c:	e7f7      	b.n	800408e <__swsetup_r+0xba>
 800409e:	bf00      	nop
 80040a0:	2000007c 	.word	0x2000007c
 80040a4:	08004fb8 	.word	0x08004fb8
 80040a8:	08004fd8 	.word	0x08004fd8
 80040ac:	08004f98 	.word	0x08004f98

080040b0 <__sflush_r>:
 80040b0:	898a      	ldrh	r2, [r1, #12]
 80040b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b6:	4605      	mov	r5, r0
 80040b8:	0710      	lsls	r0, r2, #28
 80040ba:	460c      	mov	r4, r1
 80040bc:	d458      	bmi.n	8004170 <__sflush_r+0xc0>
 80040be:	684b      	ldr	r3, [r1, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	dc05      	bgt.n	80040d0 <__sflush_r+0x20>
 80040c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	dc02      	bgt.n	80040d0 <__sflush_r+0x20>
 80040ca:	2000      	movs	r0, #0
 80040cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040d2:	2e00      	cmp	r6, #0
 80040d4:	d0f9      	beq.n	80040ca <__sflush_r+0x1a>
 80040d6:	2300      	movs	r3, #0
 80040d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040dc:	682f      	ldr	r7, [r5, #0]
 80040de:	602b      	str	r3, [r5, #0]
 80040e0:	d032      	beq.n	8004148 <__sflush_r+0x98>
 80040e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040e4:	89a3      	ldrh	r3, [r4, #12]
 80040e6:	075a      	lsls	r2, r3, #29
 80040e8:	d505      	bpl.n	80040f6 <__sflush_r+0x46>
 80040ea:	6863      	ldr	r3, [r4, #4]
 80040ec:	1ac0      	subs	r0, r0, r3
 80040ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040f0:	b10b      	cbz	r3, 80040f6 <__sflush_r+0x46>
 80040f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040f4:	1ac0      	subs	r0, r0, r3
 80040f6:	2300      	movs	r3, #0
 80040f8:	4602      	mov	r2, r0
 80040fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040fc:	6a21      	ldr	r1, [r4, #32]
 80040fe:	4628      	mov	r0, r5
 8004100:	47b0      	blx	r6
 8004102:	1c43      	adds	r3, r0, #1
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	d106      	bne.n	8004116 <__sflush_r+0x66>
 8004108:	6829      	ldr	r1, [r5, #0]
 800410a:	291d      	cmp	r1, #29
 800410c:	d82c      	bhi.n	8004168 <__sflush_r+0xb8>
 800410e:	4a2a      	ldr	r2, [pc, #168]	; (80041b8 <__sflush_r+0x108>)
 8004110:	40ca      	lsrs	r2, r1
 8004112:	07d6      	lsls	r6, r2, #31
 8004114:	d528      	bpl.n	8004168 <__sflush_r+0xb8>
 8004116:	2200      	movs	r2, #0
 8004118:	6062      	str	r2, [r4, #4]
 800411a:	04d9      	lsls	r1, r3, #19
 800411c:	6922      	ldr	r2, [r4, #16]
 800411e:	6022      	str	r2, [r4, #0]
 8004120:	d504      	bpl.n	800412c <__sflush_r+0x7c>
 8004122:	1c42      	adds	r2, r0, #1
 8004124:	d101      	bne.n	800412a <__sflush_r+0x7a>
 8004126:	682b      	ldr	r3, [r5, #0]
 8004128:	b903      	cbnz	r3, 800412c <__sflush_r+0x7c>
 800412a:	6560      	str	r0, [r4, #84]	; 0x54
 800412c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800412e:	602f      	str	r7, [r5, #0]
 8004130:	2900      	cmp	r1, #0
 8004132:	d0ca      	beq.n	80040ca <__sflush_r+0x1a>
 8004134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004138:	4299      	cmp	r1, r3
 800413a:	d002      	beq.n	8004142 <__sflush_r+0x92>
 800413c:	4628      	mov	r0, r5
 800413e:	f000 f9d5 	bl	80044ec <_free_r>
 8004142:	2000      	movs	r0, #0
 8004144:	6360      	str	r0, [r4, #52]	; 0x34
 8004146:	e7c1      	b.n	80040cc <__sflush_r+0x1c>
 8004148:	6a21      	ldr	r1, [r4, #32]
 800414a:	2301      	movs	r3, #1
 800414c:	4628      	mov	r0, r5
 800414e:	47b0      	blx	r6
 8004150:	1c41      	adds	r1, r0, #1
 8004152:	d1c7      	bne.n	80040e4 <__sflush_r+0x34>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0c4      	beq.n	80040e4 <__sflush_r+0x34>
 800415a:	2b1d      	cmp	r3, #29
 800415c:	d001      	beq.n	8004162 <__sflush_r+0xb2>
 800415e:	2b16      	cmp	r3, #22
 8004160:	d101      	bne.n	8004166 <__sflush_r+0xb6>
 8004162:	602f      	str	r7, [r5, #0]
 8004164:	e7b1      	b.n	80040ca <__sflush_r+0x1a>
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800416c:	81a3      	strh	r3, [r4, #12]
 800416e:	e7ad      	b.n	80040cc <__sflush_r+0x1c>
 8004170:	690f      	ldr	r7, [r1, #16]
 8004172:	2f00      	cmp	r7, #0
 8004174:	d0a9      	beq.n	80040ca <__sflush_r+0x1a>
 8004176:	0793      	lsls	r3, r2, #30
 8004178:	680e      	ldr	r6, [r1, #0]
 800417a:	bf08      	it	eq
 800417c:	694b      	ldreq	r3, [r1, #20]
 800417e:	600f      	str	r7, [r1, #0]
 8004180:	bf18      	it	ne
 8004182:	2300      	movne	r3, #0
 8004184:	eba6 0807 	sub.w	r8, r6, r7
 8004188:	608b      	str	r3, [r1, #8]
 800418a:	f1b8 0f00 	cmp.w	r8, #0
 800418e:	dd9c      	ble.n	80040ca <__sflush_r+0x1a>
 8004190:	6a21      	ldr	r1, [r4, #32]
 8004192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004194:	4643      	mov	r3, r8
 8004196:	463a      	mov	r2, r7
 8004198:	4628      	mov	r0, r5
 800419a:	47b0      	blx	r6
 800419c:	2800      	cmp	r0, #0
 800419e:	dc06      	bgt.n	80041ae <__sflush_r+0xfe>
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	e78e      	b.n	80040cc <__sflush_r+0x1c>
 80041ae:	4407      	add	r7, r0
 80041b0:	eba8 0800 	sub.w	r8, r8, r0
 80041b4:	e7e9      	b.n	800418a <__sflush_r+0xda>
 80041b6:	bf00      	nop
 80041b8:	20400001 	.word	0x20400001

080041bc <_fflush_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	690b      	ldr	r3, [r1, #16]
 80041c0:	4605      	mov	r5, r0
 80041c2:	460c      	mov	r4, r1
 80041c4:	b913      	cbnz	r3, 80041cc <_fflush_r+0x10>
 80041c6:	2500      	movs	r5, #0
 80041c8:	4628      	mov	r0, r5
 80041ca:	bd38      	pop	{r3, r4, r5, pc}
 80041cc:	b118      	cbz	r0, 80041d6 <_fflush_r+0x1a>
 80041ce:	6983      	ldr	r3, [r0, #24]
 80041d0:	b90b      	cbnz	r3, 80041d6 <_fflush_r+0x1a>
 80041d2:	f000 f887 	bl	80042e4 <__sinit>
 80041d6:	4b14      	ldr	r3, [pc, #80]	; (8004228 <_fflush_r+0x6c>)
 80041d8:	429c      	cmp	r4, r3
 80041da:	d11b      	bne.n	8004214 <_fflush_r+0x58>
 80041dc:	686c      	ldr	r4, [r5, #4]
 80041de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ef      	beq.n	80041c6 <_fflush_r+0xa>
 80041e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041e8:	07d0      	lsls	r0, r2, #31
 80041ea:	d404      	bmi.n	80041f6 <_fflush_r+0x3a>
 80041ec:	0599      	lsls	r1, r3, #22
 80041ee:	d402      	bmi.n	80041f6 <_fflush_r+0x3a>
 80041f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041f2:	f000 f915 	bl	8004420 <__retarget_lock_acquire_recursive>
 80041f6:	4628      	mov	r0, r5
 80041f8:	4621      	mov	r1, r4
 80041fa:	f7ff ff59 	bl	80040b0 <__sflush_r>
 80041fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004200:	07da      	lsls	r2, r3, #31
 8004202:	4605      	mov	r5, r0
 8004204:	d4e0      	bmi.n	80041c8 <_fflush_r+0xc>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	059b      	lsls	r3, r3, #22
 800420a:	d4dd      	bmi.n	80041c8 <_fflush_r+0xc>
 800420c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800420e:	f000 f908 	bl	8004422 <__retarget_lock_release_recursive>
 8004212:	e7d9      	b.n	80041c8 <_fflush_r+0xc>
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <_fflush_r+0x70>)
 8004216:	429c      	cmp	r4, r3
 8004218:	d101      	bne.n	800421e <_fflush_r+0x62>
 800421a:	68ac      	ldr	r4, [r5, #8]
 800421c:	e7df      	b.n	80041de <_fflush_r+0x22>
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <_fflush_r+0x74>)
 8004220:	429c      	cmp	r4, r3
 8004222:	bf08      	it	eq
 8004224:	68ec      	ldreq	r4, [r5, #12]
 8004226:	e7da      	b.n	80041de <_fflush_r+0x22>
 8004228:	08004fb8 	.word	0x08004fb8
 800422c:	08004fd8 	.word	0x08004fd8
 8004230:	08004f98 	.word	0x08004f98

08004234 <std>:
 8004234:	2300      	movs	r3, #0
 8004236:	b510      	push	{r4, lr}
 8004238:	4604      	mov	r4, r0
 800423a:	e9c0 3300 	strd	r3, r3, [r0]
 800423e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004242:	6083      	str	r3, [r0, #8]
 8004244:	8181      	strh	r1, [r0, #12]
 8004246:	6643      	str	r3, [r0, #100]	; 0x64
 8004248:	81c2      	strh	r2, [r0, #14]
 800424a:	6183      	str	r3, [r0, #24]
 800424c:	4619      	mov	r1, r3
 800424e:	2208      	movs	r2, #8
 8004250:	305c      	adds	r0, #92	; 0x5c
 8004252:	f7ff fd39 	bl	8003cc8 <memset>
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <std+0x38>)
 8004258:	6263      	str	r3, [r4, #36]	; 0x24
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <std+0x3c>)
 800425c:	62a3      	str	r3, [r4, #40]	; 0x28
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <std+0x40>)
 8004260:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <std+0x44>)
 8004264:	6224      	str	r4, [r4, #32]
 8004266:	6323      	str	r3, [r4, #48]	; 0x30
 8004268:	bd10      	pop	{r4, pc}
 800426a:	bf00      	nop
 800426c:	08004c3d 	.word	0x08004c3d
 8004270:	08004c5f 	.word	0x08004c5f
 8004274:	08004c97 	.word	0x08004c97
 8004278:	08004cbb 	.word	0x08004cbb

0800427c <_cleanup_r>:
 800427c:	4901      	ldr	r1, [pc, #4]	; (8004284 <_cleanup_r+0x8>)
 800427e:	f000 b8af 	b.w	80043e0 <_fwalk_reent>
 8004282:	bf00      	nop
 8004284:	080041bd 	.word	0x080041bd

08004288 <__sfmoreglue>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	1e4a      	subs	r2, r1, #1
 800428c:	2568      	movs	r5, #104	; 0x68
 800428e:	4355      	muls	r5, r2
 8004290:	460e      	mov	r6, r1
 8004292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004296:	f000 f979 	bl	800458c <_malloc_r>
 800429a:	4604      	mov	r4, r0
 800429c:	b140      	cbz	r0, 80042b0 <__sfmoreglue+0x28>
 800429e:	2100      	movs	r1, #0
 80042a0:	e9c0 1600 	strd	r1, r6, [r0]
 80042a4:	300c      	adds	r0, #12
 80042a6:	60a0      	str	r0, [r4, #8]
 80042a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042ac:	f7ff fd0c 	bl	8003cc8 <memset>
 80042b0:	4620      	mov	r0, r4
 80042b2:	bd70      	pop	{r4, r5, r6, pc}

080042b4 <__sfp_lock_acquire>:
 80042b4:	4801      	ldr	r0, [pc, #4]	; (80042bc <__sfp_lock_acquire+0x8>)
 80042b6:	f000 b8b3 	b.w	8004420 <__retarget_lock_acquire_recursive>
 80042ba:	bf00      	nop
 80042bc:	200001cc 	.word	0x200001cc

080042c0 <__sfp_lock_release>:
 80042c0:	4801      	ldr	r0, [pc, #4]	; (80042c8 <__sfp_lock_release+0x8>)
 80042c2:	f000 b8ae 	b.w	8004422 <__retarget_lock_release_recursive>
 80042c6:	bf00      	nop
 80042c8:	200001cc 	.word	0x200001cc

080042cc <__sinit_lock_acquire>:
 80042cc:	4801      	ldr	r0, [pc, #4]	; (80042d4 <__sinit_lock_acquire+0x8>)
 80042ce:	f000 b8a7 	b.w	8004420 <__retarget_lock_acquire_recursive>
 80042d2:	bf00      	nop
 80042d4:	200001c7 	.word	0x200001c7

080042d8 <__sinit_lock_release>:
 80042d8:	4801      	ldr	r0, [pc, #4]	; (80042e0 <__sinit_lock_release+0x8>)
 80042da:	f000 b8a2 	b.w	8004422 <__retarget_lock_release_recursive>
 80042de:	bf00      	nop
 80042e0:	200001c7 	.word	0x200001c7

080042e4 <__sinit>:
 80042e4:	b510      	push	{r4, lr}
 80042e6:	4604      	mov	r4, r0
 80042e8:	f7ff fff0 	bl	80042cc <__sinit_lock_acquire>
 80042ec:	69a3      	ldr	r3, [r4, #24]
 80042ee:	b11b      	cbz	r3, 80042f8 <__sinit+0x14>
 80042f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f4:	f7ff bff0 	b.w	80042d8 <__sinit_lock_release>
 80042f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80042fc:	6523      	str	r3, [r4, #80]	; 0x50
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <__sinit+0x68>)
 8004300:	4a13      	ldr	r2, [pc, #76]	; (8004350 <__sinit+0x6c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	62a2      	str	r2, [r4, #40]	; 0x28
 8004306:	42a3      	cmp	r3, r4
 8004308:	bf04      	itt	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	61a3      	streq	r3, [r4, #24]
 800430e:	4620      	mov	r0, r4
 8004310:	f000 f820 	bl	8004354 <__sfp>
 8004314:	6060      	str	r0, [r4, #4]
 8004316:	4620      	mov	r0, r4
 8004318:	f000 f81c 	bl	8004354 <__sfp>
 800431c:	60a0      	str	r0, [r4, #8]
 800431e:	4620      	mov	r0, r4
 8004320:	f000 f818 	bl	8004354 <__sfp>
 8004324:	2200      	movs	r2, #0
 8004326:	60e0      	str	r0, [r4, #12]
 8004328:	2104      	movs	r1, #4
 800432a:	6860      	ldr	r0, [r4, #4]
 800432c:	f7ff ff82 	bl	8004234 <std>
 8004330:	68a0      	ldr	r0, [r4, #8]
 8004332:	2201      	movs	r2, #1
 8004334:	2109      	movs	r1, #9
 8004336:	f7ff ff7d 	bl	8004234 <std>
 800433a:	68e0      	ldr	r0, [r4, #12]
 800433c:	2202      	movs	r2, #2
 800433e:	2112      	movs	r1, #18
 8004340:	f7ff ff78 	bl	8004234 <std>
 8004344:	2301      	movs	r3, #1
 8004346:	61a3      	str	r3, [r4, #24]
 8004348:	e7d2      	b.n	80042f0 <__sinit+0xc>
 800434a:	bf00      	nop
 800434c:	08004e90 	.word	0x08004e90
 8004350:	0800427d 	.word	0x0800427d

08004354 <__sfp>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	4607      	mov	r7, r0
 8004358:	f7ff ffac 	bl	80042b4 <__sfp_lock_acquire>
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <__sfp+0x84>)
 800435e:	681e      	ldr	r6, [r3, #0]
 8004360:	69b3      	ldr	r3, [r6, #24]
 8004362:	b913      	cbnz	r3, 800436a <__sfp+0x16>
 8004364:	4630      	mov	r0, r6
 8004366:	f7ff ffbd 	bl	80042e4 <__sinit>
 800436a:	3648      	adds	r6, #72	; 0x48
 800436c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004370:	3b01      	subs	r3, #1
 8004372:	d503      	bpl.n	800437c <__sfp+0x28>
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	b30b      	cbz	r3, 80043bc <__sfp+0x68>
 8004378:	6836      	ldr	r6, [r6, #0]
 800437a:	e7f7      	b.n	800436c <__sfp+0x18>
 800437c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004380:	b9d5      	cbnz	r5, 80043b8 <__sfp+0x64>
 8004382:	4b16      	ldr	r3, [pc, #88]	; (80043dc <__sfp+0x88>)
 8004384:	60e3      	str	r3, [r4, #12]
 8004386:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800438a:	6665      	str	r5, [r4, #100]	; 0x64
 800438c:	f000 f847 	bl	800441e <__retarget_lock_init_recursive>
 8004390:	f7ff ff96 	bl	80042c0 <__sfp_lock_release>
 8004394:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004398:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800439c:	6025      	str	r5, [r4, #0]
 800439e:	61a5      	str	r5, [r4, #24]
 80043a0:	2208      	movs	r2, #8
 80043a2:	4629      	mov	r1, r5
 80043a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043a8:	f7ff fc8e 	bl	8003cc8 <memset>
 80043ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043b4:	4620      	mov	r0, r4
 80043b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b8:	3468      	adds	r4, #104	; 0x68
 80043ba:	e7d9      	b.n	8004370 <__sfp+0x1c>
 80043bc:	2104      	movs	r1, #4
 80043be:	4638      	mov	r0, r7
 80043c0:	f7ff ff62 	bl	8004288 <__sfmoreglue>
 80043c4:	4604      	mov	r4, r0
 80043c6:	6030      	str	r0, [r6, #0]
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d1d5      	bne.n	8004378 <__sfp+0x24>
 80043cc:	f7ff ff78 	bl	80042c0 <__sfp_lock_release>
 80043d0:	230c      	movs	r3, #12
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	e7ee      	b.n	80043b4 <__sfp+0x60>
 80043d6:	bf00      	nop
 80043d8:	08004e90 	.word	0x08004e90
 80043dc:	ffff0001 	.word	0xffff0001

080043e0 <_fwalk_reent>:
 80043e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e4:	4606      	mov	r6, r0
 80043e6:	4688      	mov	r8, r1
 80043e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80043ec:	2700      	movs	r7, #0
 80043ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043f2:	f1b9 0901 	subs.w	r9, r9, #1
 80043f6:	d505      	bpl.n	8004404 <_fwalk_reent+0x24>
 80043f8:	6824      	ldr	r4, [r4, #0]
 80043fa:	2c00      	cmp	r4, #0
 80043fc:	d1f7      	bne.n	80043ee <_fwalk_reent+0xe>
 80043fe:	4638      	mov	r0, r7
 8004400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004404:	89ab      	ldrh	r3, [r5, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d907      	bls.n	800441a <_fwalk_reent+0x3a>
 800440a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800440e:	3301      	adds	r3, #1
 8004410:	d003      	beq.n	800441a <_fwalk_reent+0x3a>
 8004412:	4629      	mov	r1, r5
 8004414:	4630      	mov	r0, r6
 8004416:	47c0      	blx	r8
 8004418:	4307      	orrs	r7, r0
 800441a:	3568      	adds	r5, #104	; 0x68
 800441c:	e7e9      	b.n	80043f2 <_fwalk_reent+0x12>

0800441e <__retarget_lock_init_recursive>:
 800441e:	4770      	bx	lr

08004420 <__retarget_lock_acquire_recursive>:
 8004420:	4770      	bx	lr

08004422 <__retarget_lock_release_recursive>:
 8004422:	4770      	bx	lr

08004424 <__swhatbuf_r>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	460e      	mov	r6, r1
 8004428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800442c:	2900      	cmp	r1, #0
 800442e:	b096      	sub	sp, #88	; 0x58
 8004430:	4614      	mov	r4, r2
 8004432:	461d      	mov	r5, r3
 8004434:	da07      	bge.n	8004446 <__swhatbuf_r+0x22>
 8004436:	2300      	movs	r3, #0
 8004438:	602b      	str	r3, [r5, #0]
 800443a:	89b3      	ldrh	r3, [r6, #12]
 800443c:	061a      	lsls	r2, r3, #24
 800443e:	d410      	bmi.n	8004462 <__swhatbuf_r+0x3e>
 8004440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004444:	e00e      	b.n	8004464 <__swhatbuf_r+0x40>
 8004446:	466a      	mov	r2, sp
 8004448:	f000 fc5e 	bl	8004d08 <_fstat_r>
 800444c:	2800      	cmp	r0, #0
 800444e:	dbf2      	blt.n	8004436 <__swhatbuf_r+0x12>
 8004450:	9a01      	ldr	r2, [sp, #4]
 8004452:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004456:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800445a:	425a      	negs	r2, r3
 800445c:	415a      	adcs	r2, r3
 800445e:	602a      	str	r2, [r5, #0]
 8004460:	e7ee      	b.n	8004440 <__swhatbuf_r+0x1c>
 8004462:	2340      	movs	r3, #64	; 0x40
 8004464:	2000      	movs	r0, #0
 8004466:	6023      	str	r3, [r4, #0]
 8004468:	b016      	add	sp, #88	; 0x58
 800446a:	bd70      	pop	{r4, r5, r6, pc}

0800446c <__smakebuf_r>:
 800446c:	898b      	ldrh	r3, [r1, #12]
 800446e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004470:	079d      	lsls	r5, r3, #30
 8004472:	4606      	mov	r6, r0
 8004474:	460c      	mov	r4, r1
 8004476:	d507      	bpl.n	8004488 <__smakebuf_r+0x1c>
 8004478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	6123      	str	r3, [r4, #16]
 8004480:	2301      	movs	r3, #1
 8004482:	6163      	str	r3, [r4, #20]
 8004484:	b002      	add	sp, #8
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	ab01      	add	r3, sp, #4
 800448a:	466a      	mov	r2, sp
 800448c:	f7ff ffca 	bl	8004424 <__swhatbuf_r>
 8004490:	9900      	ldr	r1, [sp, #0]
 8004492:	4605      	mov	r5, r0
 8004494:	4630      	mov	r0, r6
 8004496:	f000 f879 	bl	800458c <_malloc_r>
 800449a:	b948      	cbnz	r0, 80044b0 <__smakebuf_r+0x44>
 800449c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a0:	059a      	lsls	r2, r3, #22
 80044a2:	d4ef      	bmi.n	8004484 <__smakebuf_r+0x18>
 80044a4:	f023 0303 	bic.w	r3, r3, #3
 80044a8:	f043 0302 	orr.w	r3, r3, #2
 80044ac:	81a3      	strh	r3, [r4, #12]
 80044ae:	e7e3      	b.n	8004478 <__smakebuf_r+0xc>
 80044b0:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <__smakebuf_r+0x7c>)
 80044b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	6020      	str	r0, [r4, #0]
 80044b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044bc:	81a3      	strh	r3, [r4, #12]
 80044be:	9b00      	ldr	r3, [sp, #0]
 80044c0:	6163      	str	r3, [r4, #20]
 80044c2:	9b01      	ldr	r3, [sp, #4]
 80044c4:	6120      	str	r0, [r4, #16]
 80044c6:	b15b      	cbz	r3, 80044e0 <__smakebuf_r+0x74>
 80044c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044cc:	4630      	mov	r0, r6
 80044ce:	f000 fc2d 	bl	8004d2c <_isatty_r>
 80044d2:	b128      	cbz	r0, 80044e0 <__smakebuf_r+0x74>
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	81a3      	strh	r3, [r4, #12]
 80044e0:	89a0      	ldrh	r0, [r4, #12]
 80044e2:	4305      	orrs	r5, r0
 80044e4:	81a5      	strh	r5, [r4, #12]
 80044e6:	e7cd      	b.n	8004484 <__smakebuf_r+0x18>
 80044e8:	0800427d 	.word	0x0800427d

080044ec <_free_r>:
 80044ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ee:	2900      	cmp	r1, #0
 80044f0:	d048      	beq.n	8004584 <_free_r+0x98>
 80044f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f6:	9001      	str	r0, [sp, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f1a1 0404 	sub.w	r4, r1, #4
 80044fe:	bfb8      	it	lt
 8004500:	18e4      	addlt	r4, r4, r3
 8004502:	f000 fc35 	bl	8004d70 <__malloc_lock>
 8004506:	4a20      	ldr	r2, [pc, #128]	; (8004588 <_free_r+0x9c>)
 8004508:	9801      	ldr	r0, [sp, #4]
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	4615      	mov	r5, r2
 800450e:	b933      	cbnz	r3, 800451e <_free_r+0x32>
 8004510:	6063      	str	r3, [r4, #4]
 8004512:	6014      	str	r4, [r2, #0]
 8004514:	b003      	add	sp, #12
 8004516:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800451a:	f000 bc2f 	b.w	8004d7c <__malloc_unlock>
 800451e:	42a3      	cmp	r3, r4
 8004520:	d90b      	bls.n	800453a <_free_r+0x4e>
 8004522:	6821      	ldr	r1, [r4, #0]
 8004524:	1862      	adds	r2, r4, r1
 8004526:	4293      	cmp	r3, r2
 8004528:	bf04      	itt	eq
 800452a:	681a      	ldreq	r2, [r3, #0]
 800452c:	685b      	ldreq	r3, [r3, #4]
 800452e:	6063      	str	r3, [r4, #4]
 8004530:	bf04      	itt	eq
 8004532:	1852      	addeq	r2, r2, r1
 8004534:	6022      	streq	r2, [r4, #0]
 8004536:	602c      	str	r4, [r5, #0]
 8004538:	e7ec      	b.n	8004514 <_free_r+0x28>
 800453a:	461a      	mov	r2, r3
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	b10b      	cbz	r3, 8004544 <_free_r+0x58>
 8004540:	42a3      	cmp	r3, r4
 8004542:	d9fa      	bls.n	800453a <_free_r+0x4e>
 8004544:	6811      	ldr	r1, [r2, #0]
 8004546:	1855      	adds	r5, r2, r1
 8004548:	42a5      	cmp	r5, r4
 800454a:	d10b      	bne.n	8004564 <_free_r+0x78>
 800454c:	6824      	ldr	r4, [r4, #0]
 800454e:	4421      	add	r1, r4
 8004550:	1854      	adds	r4, r2, r1
 8004552:	42a3      	cmp	r3, r4
 8004554:	6011      	str	r1, [r2, #0]
 8004556:	d1dd      	bne.n	8004514 <_free_r+0x28>
 8004558:	681c      	ldr	r4, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	6053      	str	r3, [r2, #4]
 800455e:	4421      	add	r1, r4
 8004560:	6011      	str	r1, [r2, #0]
 8004562:	e7d7      	b.n	8004514 <_free_r+0x28>
 8004564:	d902      	bls.n	800456c <_free_r+0x80>
 8004566:	230c      	movs	r3, #12
 8004568:	6003      	str	r3, [r0, #0]
 800456a:	e7d3      	b.n	8004514 <_free_r+0x28>
 800456c:	6825      	ldr	r5, [r4, #0]
 800456e:	1961      	adds	r1, r4, r5
 8004570:	428b      	cmp	r3, r1
 8004572:	bf04      	itt	eq
 8004574:	6819      	ldreq	r1, [r3, #0]
 8004576:	685b      	ldreq	r3, [r3, #4]
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	bf04      	itt	eq
 800457c:	1949      	addeq	r1, r1, r5
 800457e:	6021      	streq	r1, [r4, #0]
 8004580:	6054      	str	r4, [r2, #4]
 8004582:	e7c7      	b.n	8004514 <_free_r+0x28>
 8004584:	b003      	add	sp, #12
 8004586:	bd30      	pop	{r4, r5, pc}
 8004588:	20000108 	.word	0x20000108

0800458c <_malloc_r>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	1ccd      	adds	r5, r1, #3
 8004590:	f025 0503 	bic.w	r5, r5, #3
 8004594:	3508      	adds	r5, #8
 8004596:	2d0c      	cmp	r5, #12
 8004598:	bf38      	it	cc
 800459a:	250c      	movcc	r5, #12
 800459c:	2d00      	cmp	r5, #0
 800459e:	4606      	mov	r6, r0
 80045a0:	db01      	blt.n	80045a6 <_malloc_r+0x1a>
 80045a2:	42a9      	cmp	r1, r5
 80045a4:	d903      	bls.n	80045ae <_malloc_r+0x22>
 80045a6:	230c      	movs	r3, #12
 80045a8:	6033      	str	r3, [r6, #0]
 80045aa:	2000      	movs	r0, #0
 80045ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ae:	f000 fbdf 	bl	8004d70 <__malloc_lock>
 80045b2:	4921      	ldr	r1, [pc, #132]	; (8004638 <_malloc_r+0xac>)
 80045b4:	680a      	ldr	r2, [r1, #0]
 80045b6:	4614      	mov	r4, r2
 80045b8:	b99c      	cbnz	r4, 80045e2 <_malloc_r+0x56>
 80045ba:	4f20      	ldr	r7, [pc, #128]	; (800463c <_malloc_r+0xb0>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	b923      	cbnz	r3, 80045ca <_malloc_r+0x3e>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4630      	mov	r0, r6
 80045c4:	f000 fb2a 	bl	8004c1c <_sbrk_r>
 80045c8:	6038      	str	r0, [r7, #0]
 80045ca:	4629      	mov	r1, r5
 80045cc:	4630      	mov	r0, r6
 80045ce:	f000 fb25 	bl	8004c1c <_sbrk_r>
 80045d2:	1c43      	adds	r3, r0, #1
 80045d4:	d123      	bne.n	800461e <_malloc_r+0x92>
 80045d6:	230c      	movs	r3, #12
 80045d8:	6033      	str	r3, [r6, #0]
 80045da:	4630      	mov	r0, r6
 80045dc:	f000 fbce 	bl	8004d7c <__malloc_unlock>
 80045e0:	e7e3      	b.n	80045aa <_malloc_r+0x1e>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	1b5b      	subs	r3, r3, r5
 80045e6:	d417      	bmi.n	8004618 <_malloc_r+0x8c>
 80045e8:	2b0b      	cmp	r3, #11
 80045ea:	d903      	bls.n	80045f4 <_malloc_r+0x68>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	441c      	add	r4, r3
 80045f0:	6025      	str	r5, [r4, #0]
 80045f2:	e004      	b.n	80045fe <_malloc_r+0x72>
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	42a2      	cmp	r2, r4
 80045f8:	bf0c      	ite	eq
 80045fa:	600b      	streq	r3, [r1, #0]
 80045fc:	6053      	strne	r3, [r2, #4]
 80045fe:	4630      	mov	r0, r6
 8004600:	f000 fbbc 	bl	8004d7c <__malloc_unlock>
 8004604:	f104 000b 	add.w	r0, r4, #11
 8004608:	1d23      	adds	r3, r4, #4
 800460a:	f020 0007 	bic.w	r0, r0, #7
 800460e:	1ac2      	subs	r2, r0, r3
 8004610:	d0cc      	beq.n	80045ac <_malloc_r+0x20>
 8004612:	1a1b      	subs	r3, r3, r0
 8004614:	50a3      	str	r3, [r4, r2]
 8004616:	e7c9      	b.n	80045ac <_malloc_r+0x20>
 8004618:	4622      	mov	r2, r4
 800461a:	6864      	ldr	r4, [r4, #4]
 800461c:	e7cc      	b.n	80045b8 <_malloc_r+0x2c>
 800461e:	1cc4      	adds	r4, r0, #3
 8004620:	f024 0403 	bic.w	r4, r4, #3
 8004624:	42a0      	cmp	r0, r4
 8004626:	d0e3      	beq.n	80045f0 <_malloc_r+0x64>
 8004628:	1a21      	subs	r1, r4, r0
 800462a:	4630      	mov	r0, r6
 800462c:	f000 faf6 	bl	8004c1c <_sbrk_r>
 8004630:	3001      	adds	r0, #1
 8004632:	d1dd      	bne.n	80045f0 <_malloc_r+0x64>
 8004634:	e7cf      	b.n	80045d6 <_malloc_r+0x4a>
 8004636:	bf00      	nop
 8004638:	20000108 	.word	0x20000108
 800463c:	2000010c 	.word	0x2000010c

08004640 <__sfputc_r>:
 8004640:	6893      	ldr	r3, [r2, #8]
 8004642:	3b01      	subs	r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	b410      	push	{r4}
 8004648:	6093      	str	r3, [r2, #8]
 800464a:	da08      	bge.n	800465e <__sfputc_r+0x1e>
 800464c:	6994      	ldr	r4, [r2, #24]
 800464e:	42a3      	cmp	r3, r4
 8004650:	db01      	blt.n	8004656 <__sfputc_r+0x16>
 8004652:	290a      	cmp	r1, #10
 8004654:	d103      	bne.n	800465e <__sfputc_r+0x1e>
 8004656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800465a:	f7ff bc69 	b.w	8003f30 <__swbuf_r>
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	1c58      	adds	r0, r3, #1
 8004662:	6010      	str	r0, [r2, #0]
 8004664:	7019      	strb	r1, [r3, #0]
 8004666:	4608      	mov	r0, r1
 8004668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800466c:	4770      	bx	lr

0800466e <__sfputs_r>:
 800466e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004670:	4606      	mov	r6, r0
 8004672:	460f      	mov	r7, r1
 8004674:	4614      	mov	r4, r2
 8004676:	18d5      	adds	r5, r2, r3
 8004678:	42ac      	cmp	r4, r5
 800467a:	d101      	bne.n	8004680 <__sfputs_r+0x12>
 800467c:	2000      	movs	r0, #0
 800467e:	e007      	b.n	8004690 <__sfputs_r+0x22>
 8004680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004684:	463a      	mov	r2, r7
 8004686:	4630      	mov	r0, r6
 8004688:	f7ff ffda 	bl	8004640 <__sfputc_r>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d1f3      	bne.n	8004678 <__sfputs_r+0xa>
 8004690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004694 <_vfiprintf_r>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	460d      	mov	r5, r1
 800469a:	b09d      	sub	sp, #116	; 0x74
 800469c:	4614      	mov	r4, r2
 800469e:	4698      	mov	r8, r3
 80046a0:	4606      	mov	r6, r0
 80046a2:	b118      	cbz	r0, 80046ac <_vfiprintf_r+0x18>
 80046a4:	6983      	ldr	r3, [r0, #24]
 80046a6:	b90b      	cbnz	r3, 80046ac <_vfiprintf_r+0x18>
 80046a8:	f7ff fe1c 	bl	80042e4 <__sinit>
 80046ac:	4b89      	ldr	r3, [pc, #548]	; (80048d4 <_vfiprintf_r+0x240>)
 80046ae:	429d      	cmp	r5, r3
 80046b0:	d11b      	bne.n	80046ea <_vfiprintf_r+0x56>
 80046b2:	6875      	ldr	r5, [r6, #4]
 80046b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046b6:	07d9      	lsls	r1, r3, #31
 80046b8:	d405      	bmi.n	80046c6 <_vfiprintf_r+0x32>
 80046ba:	89ab      	ldrh	r3, [r5, #12]
 80046bc:	059a      	lsls	r2, r3, #22
 80046be:	d402      	bmi.n	80046c6 <_vfiprintf_r+0x32>
 80046c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046c2:	f7ff fead 	bl	8004420 <__retarget_lock_acquire_recursive>
 80046c6:	89ab      	ldrh	r3, [r5, #12]
 80046c8:	071b      	lsls	r3, r3, #28
 80046ca:	d501      	bpl.n	80046d0 <_vfiprintf_r+0x3c>
 80046cc:	692b      	ldr	r3, [r5, #16]
 80046ce:	b9eb      	cbnz	r3, 800470c <_vfiprintf_r+0x78>
 80046d0:	4629      	mov	r1, r5
 80046d2:	4630      	mov	r0, r6
 80046d4:	f7ff fc7e 	bl	8003fd4 <__swsetup_r>
 80046d8:	b1c0      	cbz	r0, 800470c <_vfiprintf_r+0x78>
 80046da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046dc:	07dc      	lsls	r4, r3, #31
 80046de:	d50e      	bpl.n	80046fe <_vfiprintf_r+0x6a>
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	b01d      	add	sp, #116	; 0x74
 80046e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ea:	4b7b      	ldr	r3, [pc, #492]	; (80048d8 <_vfiprintf_r+0x244>)
 80046ec:	429d      	cmp	r5, r3
 80046ee:	d101      	bne.n	80046f4 <_vfiprintf_r+0x60>
 80046f0:	68b5      	ldr	r5, [r6, #8]
 80046f2:	e7df      	b.n	80046b4 <_vfiprintf_r+0x20>
 80046f4:	4b79      	ldr	r3, [pc, #484]	; (80048dc <_vfiprintf_r+0x248>)
 80046f6:	429d      	cmp	r5, r3
 80046f8:	bf08      	it	eq
 80046fa:	68f5      	ldreq	r5, [r6, #12]
 80046fc:	e7da      	b.n	80046b4 <_vfiprintf_r+0x20>
 80046fe:	89ab      	ldrh	r3, [r5, #12]
 8004700:	0598      	lsls	r0, r3, #22
 8004702:	d4ed      	bmi.n	80046e0 <_vfiprintf_r+0x4c>
 8004704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004706:	f7ff fe8c 	bl	8004422 <__retarget_lock_release_recursive>
 800470a:	e7e9      	b.n	80046e0 <_vfiprintf_r+0x4c>
 800470c:	2300      	movs	r3, #0
 800470e:	9309      	str	r3, [sp, #36]	; 0x24
 8004710:	2320      	movs	r3, #32
 8004712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004716:	f8cd 800c 	str.w	r8, [sp, #12]
 800471a:	2330      	movs	r3, #48	; 0x30
 800471c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048e0 <_vfiprintf_r+0x24c>
 8004720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004724:	f04f 0901 	mov.w	r9, #1
 8004728:	4623      	mov	r3, r4
 800472a:	469a      	mov	sl, r3
 800472c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004730:	b10a      	cbz	r2, 8004736 <_vfiprintf_r+0xa2>
 8004732:	2a25      	cmp	r2, #37	; 0x25
 8004734:	d1f9      	bne.n	800472a <_vfiprintf_r+0x96>
 8004736:	ebba 0b04 	subs.w	fp, sl, r4
 800473a:	d00b      	beq.n	8004754 <_vfiprintf_r+0xc0>
 800473c:	465b      	mov	r3, fp
 800473e:	4622      	mov	r2, r4
 8004740:	4629      	mov	r1, r5
 8004742:	4630      	mov	r0, r6
 8004744:	f7ff ff93 	bl	800466e <__sfputs_r>
 8004748:	3001      	adds	r0, #1
 800474a:	f000 80aa 	beq.w	80048a2 <_vfiprintf_r+0x20e>
 800474e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004750:	445a      	add	r2, fp
 8004752:	9209      	str	r2, [sp, #36]	; 0x24
 8004754:	f89a 3000 	ldrb.w	r3, [sl]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80a2 	beq.w	80048a2 <_vfiprintf_r+0x20e>
 800475e:	2300      	movs	r3, #0
 8004760:	f04f 32ff 	mov.w	r2, #4294967295
 8004764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004768:	f10a 0a01 	add.w	sl, sl, #1
 800476c:	9304      	str	r3, [sp, #16]
 800476e:	9307      	str	r3, [sp, #28]
 8004770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004774:	931a      	str	r3, [sp, #104]	; 0x68
 8004776:	4654      	mov	r4, sl
 8004778:	2205      	movs	r2, #5
 800477a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800477e:	4858      	ldr	r0, [pc, #352]	; (80048e0 <_vfiprintf_r+0x24c>)
 8004780:	f7fb fd36 	bl	80001f0 <memchr>
 8004784:	9a04      	ldr	r2, [sp, #16]
 8004786:	b9d8      	cbnz	r0, 80047c0 <_vfiprintf_r+0x12c>
 8004788:	06d1      	lsls	r1, r2, #27
 800478a:	bf44      	itt	mi
 800478c:	2320      	movmi	r3, #32
 800478e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004792:	0713      	lsls	r3, r2, #28
 8004794:	bf44      	itt	mi
 8004796:	232b      	movmi	r3, #43	; 0x2b
 8004798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800479c:	f89a 3000 	ldrb.w	r3, [sl]
 80047a0:	2b2a      	cmp	r3, #42	; 0x2a
 80047a2:	d015      	beq.n	80047d0 <_vfiprintf_r+0x13c>
 80047a4:	9a07      	ldr	r2, [sp, #28]
 80047a6:	4654      	mov	r4, sl
 80047a8:	2000      	movs	r0, #0
 80047aa:	f04f 0c0a 	mov.w	ip, #10
 80047ae:	4621      	mov	r1, r4
 80047b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047b4:	3b30      	subs	r3, #48	; 0x30
 80047b6:	2b09      	cmp	r3, #9
 80047b8:	d94e      	bls.n	8004858 <_vfiprintf_r+0x1c4>
 80047ba:	b1b0      	cbz	r0, 80047ea <_vfiprintf_r+0x156>
 80047bc:	9207      	str	r2, [sp, #28]
 80047be:	e014      	b.n	80047ea <_vfiprintf_r+0x156>
 80047c0:	eba0 0308 	sub.w	r3, r0, r8
 80047c4:	fa09 f303 	lsl.w	r3, r9, r3
 80047c8:	4313      	orrs	r3, r2
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	46a2      	mov	sl, r4
 80047ce:	e7d2      	b.n	8004776 <_vfiprintf_r+0xe2>
 80047d0:	9b03      	ldr	r3, [sp, #12]
 80047d2:	1d19      	adds	r1, r3, #4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	9103      	str	r1, [sp, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bfbb      	ittet	lt
 80047dc:	425b      	neglt	r3, r3
 80047de:	f042 0202 	orrlt.w	r2, r2, #2
 80047e2:	9307      	strge	r3, [sp, #28]
 80047e4:	9307      	strlt	r3, [sp, #28]
 80047e6:	bfb8      	it	lt
 80047e8:	9204      	strlt	r2, [sp, #16]
 80047ea:	7823      	ldrb	r3, [r4, #0]
 80047ec:	2b2e      	cmp	r3, #46	; 0x2e
 80047ee:	d10c      	bne.n	800480a <_vfiprintf_r+0x176>
 80047f0:	7863      	ldrb	r3, [r4, #1]
 80047f2:	2b2a      	cmp	r3, #42	; 0x2a
 80047f4:	d135      	bne.n	8004862 <_vfiprintf_r+0x1ce>
 80047f6:	9b03      	ldr	r3, [sp, #12]
 80047f8:	1d1a      	adds	r2, r3, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	9203      	str	r2, [sp, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfb8      	it	lt
 8004802:	f04f 33ff 	movlt.w	r3, #4294967295
 8004806:	3402      	adds	r4, #2
 8004808:	9305      	str	r3, [sp, #20]
 800480a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80048f0 <_vfiprintf_r+0x25c>
 800480e:	7821      	ldrb	r1, [r4, #0]
 8004810:	2203      	movs	r2, #3
 8004812:	4650      	mov	r0, sl
 8004814:	f7fb fcec 	bl	80001f0 <memchr>
 8004818:	b140      	cbz	r0, 800482c <_vfiprintf_r+0x198>
 800481a:	2340      	movs	r3, #64	; 0x40
 800481c:	eba0 000a 	sub.w	r0, r0, sl
 8004820:	fa03 f000 	lsl.w	r0, r3, r0
 8004824:	9b04      	ldr	r3, [sp, #16]
 8004826:	4303      	orrs	r3, r0
 8004828:	3401      	adds	r4, #1
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004830:	482c      	ldr	r0, [pc, #176]	; (80048e4 <_vfiprintf_r+0x250>)
 8004832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004836:	2206      	movs	r2, #6
 8004838:	f7fb fcda 	bl	80001f0 <memchr>
 800483c:	2800      	cmp	r0, #0
 800483e:	d03f      	beq.n	80048c0 <_vfiprintf_r+0x22c>
 8004840:	4b29      	ldr	r3, [pc, #164]	; (80048e8 <_vfiprintf_r+0x254>)
 8004842:	bb1b      	cbnz	r3, 800488c <_vfiprintf_r+0x1f8>
 8004844:	9b03      	ldr	r3, [sp, #12]
 8004846:	3307      	adds	r3, #7
 8004848:	f023 0307 	bic.w	r3, r3, #7
 800484c:	3308      	adds	r3, #8
 800484e:	9303      	str	r3, [sp, #12]
 8004850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004852:	443b      	add	r3, r7
 8004854:	9309      	str	r3, [sp, #36]	; 0x24
 8004856:	e767      	b.n	8004728 <_vfiprintf_r+0x94>
 8004858:	fb0c 3202 	mla	r2, ip, r2, r3
 800485c:	460c      	mov	r4, r1
 800485e:	2001      	movs	r0, #1
 8004860:	e7a5      	b.n	80047ae <_vfiprintf_r+0x11a>
 8004862:	2300      	movs	r3, #0
 8004864:	3401      	adds	r4, #1
 8004866:	9305      	str	r3, [sp, #20]
 8004868:	4619      	mov	r1, r3
 800486a:	f04f 0c0a 	mov.w	ip, #10
 800486e:	4620      	mov	r0, r4
 8004870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004874:	3a30      	subs	r2, #48	; 0x30
 8004876:	2a09      	cmp	r2, #9
 8004878:	d903      	bls.n	8004882 <_vfiprintf_r+0x1ee>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0c5      	beq.n	800480a <_vfiprintf_r+0x176>
 800487e:	9105      	str	r1, [sp, #20]
 8004880:	e7c3      	b.n	800480a <_vfiprintf_r+0x176>
 8004882:	fb0c 2101 	mla	r1, ip, r1, r2
 8004886:	4604      	mov	r4, r0
 8004888:	2301      	movs	r3, #1
 800488a:	e7f0      	b.n	800486e <_vfiprintf_r+0x1da>
 800488c:	ab03      	add	r3, sp, #12
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	462a      	mov	r2, r5
 8004892:	4b16      	ldr	r3, [pc, #88]	; (80048ec <_vfiprintf_r+0x258>)
 8004894:	a904      	add	r1, sp, #16
 8004896:	4630      	mov	r0, r6
 8004898:	f3af 8000 	nop.w
 800489c:	4607      	mov	r7, r0
 800489e:	1c78      	adds	r0, r7, #1
 80048a0:	d1d6      	bne.n	8004850 <_vfiprintf_r+0x1bc>
 80048a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048a4:	07d9      	lsls	r1, r3, #31
 80048a6:	d405      	bmi.n	80048b4 <_vfiprintf_r+0x220>
 80048a8:	89ab      	ldrh	r3, [r5, #12]
 80048aa:	059a      	lsls	r2, r3, #22
 80048ac:	d402      	bmi.n	80048b4 <_vfiprintf_r+0x220>
 80048ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048b0:	f7ff fdb7 	bl	8004422 <__retarget_lock_release_recursive>
 80048b4:	89ab      	ldrh	r3, [r5, #12]
 80048b6:	065b      	lsls	r3, r3, #25
 80048b8:	f53f af12 	bmi.w	80046e0 <_vfiprintf_r+0x4c>
 80048bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048be:	e711      	b.n	80046e4 <_vfiprintf_r+0x50>
 80048c0:	ab03      	add	r3, sp, #12
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	462a      	mov	r2, r5
 80048c6:	4b09      	ldr	r3, [pc, #36]	; (80048ec <_vfiprintf_r+0x258>)
 80048c8:	a904      	add	r1, sp, #16
 80048ca:	4630      	mov	r0, r6
 80048cc:	f000 f880 	bl	80049d0 <_printf_i>
 80048d0:	e7e4      	b.n	800489c <_vfiprintf_r+0x208>
 80048d2:	bf00      	nop
 80048d4:	08004fb8 	.word	0x08004fb8
 80048d8:	08004fd8 	.word	0x08004fd8
 80048dc:	08004f98 	.word	0x08004f98
 80048e0:	08004ff8 	.word	0x08004ff8
 80048e4:	08005002 	.word	0x08005002
 80048e8:	00000000 	.word	0x00000000
 80048ec:	0800466f 	.word	0x0800466f
 80048f0:	08004ffe 	.word	0x08004ffe

080048f4 <_printf_common>:
 80048f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f8:	4616      	mov	r6, r2
 80048fa:	4699      	mov	r9, r3
 80048fc:	688a      	ldr	r2, [r1, #8]
 80048fe:	690b      	ldr	r3, [r1, #16]
 8004900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004904:	4293      	cmp	r3, r2
 8004906:	bfb8      	it	lt
 8004908:	4613      	movlt	r3, r2
 800490a:	6033      	str	r3, [r6, #0]
 800490c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004910:	4607      	mov	r7, r0
 8004912:	460c      	mov	r4, r1
 8004914:	b10a      	cbz	r2, 800491a <_printf_common+0x26>
 8004916:	3301      	adds	r3, #1
 8004918:	6033      	str	r3, [r6, #0]
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	0699      	lsls	r1, r3, #26
 800491e:	bf42      	ittt	mi
 8004920:	6833      	ldrmi	r3, [r6, #0]
 8004922:	3302      	addmi	r3, #2
 8004924:	6033      	strmi	r3, [r6, #0]
 8004926:	6825      	ldr	r5, [r4, #0]
 8004928:	f015 0506 	ands.w	r5, r5, #6
 800492c:	d106      	bne.n	800493c <_printf_common+0x48>
 800492e:	f104 0a19 	add.w	sl, r4, #25
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	6832      	ldr	r2, [r6, #0]
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	42ab      	cmp	r3, r5
 800493a:	dc26      	bgt.n	800498a <_printf_common+0x96>
 800493c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004940:	1e13      	subs	r3, r2, #0
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	bf18      	it	ne
 8004946:	2301      	movne	r3, #1
 8004948:	0692      	lsls	r2, r2, #26
 800494a:	d42b      	bmi.n	80049a4 <_printf_common+0xb0>
 800494c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004950:	4649      	mov	r1, r9
 8004952:	4638      	mov	r0, r7
 8004954:	47c0      	blx	r8
 8004956:	3001      	adds	r0, #1
 8004958:	d01e      	beq.n	8004998 <_printf_common+0xa4>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	68e5      	ldr	r5, [r4, #12]
 800495e:	6832      	ldr	r2, [r6, #0]
 8004960:	f003 0306 	and.w	r3, r3, #6
 8004964:	2b04      	cmp	r3, #4
 8004966:	bf08      	it	eq
 8004968:	1aad      	subeq	r5, r5, r2
 800496a:	68a3      	ldr	r3, [r4, #8]
 800496c:	6922      	ldr	r2, [r4, #16]
 800496e:	bf0c      	ite	eq
 8004970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004974:	2500      	movne	r5, #0
 8004976:	4293      	cmp	r3, r2
 8004978:	bfc4      	itt	gt
 800497a:	1a9b      	subgt	r3, r3, r2
 800497c:	18ed      	addgt	r5, r5, r3
 800497e:	2600      	movs	r6, #0
 8004980:	341a      	adds	r4, #26
 8004982:	42b5      	cmp	r5, r6
 8004984:	d11a      	bne.n	80049bc <_printf_common+0xc8>
 8004986:	2000      	movs	r0, #0
 8004988:	e008      	b.n	800499c <_printf_common+0xa8>
 800498a:	2301      	movs	r3, #1
 800498c:	4652      	mov	r2, sl
 800498e:	4649      	mov	r1, r9
 8004990:	4638      	mov	r0, r7
 8004992:	47c0      	blx	r8
 8004994:	3001      	adds	r0, #1
 8004996:	d103      	bne.n	80049a0 <_printf_common+0xac>
 8004998:	f04f 30ff 	mov.w	r0, #4294967295
 800499c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a0:	3501      	adds	r5, #1
 80049a2:	e7c6      	b.n	8004932 <_printf_common+0x3e>
 80049a4:	18e1      	adds	r1, r4, r3
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	2030      	movs	r0, #48	; 0x30
 80049aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049ae:	4422      	add	r2, r4
 80049b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049b8:	3302      	adds	r3, #2
 80049ba:	e7c7      	b.n	800494c <_printf_common+0x58>
 80049bc:	2301      	movs	r3, #1
 80049be:	4622      	mov	r2, r4
 80049c0:	4649      	mov	r1, r9
 80049c2:	4638      	mov	r0, r7
 80049c4:	47c0      	blx	r8
 80049c6:	3001      	adds	r0, #1
 80049c8:	d0e6      	beq.n	8004998 <_printf_common+0xa4>
 80049ca:	3601      	adds	r6, #1
 80049cc:	e7d9      	b.n	8004982 <_printf_common+0x8e>
	...

080049d0 <_printf_i>:
 80049d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d4:	460c      	mov	r4, r1
 80049d6:	4691      	mov	r9, r2
 80049d8:	7e27      	ldrb	r7, [r4, #24]
 80049da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049dc:	2f78      	cmp	r7, #120	; 0x78
 80049de:	4680      	mov	r8, r0
 80049e0:	469a      	mov	sl, r3
 80049e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049e6:	d807      	bhi.n	80049f8 <_printf_i+0x28>
 80049e8:	2f62      	cmp	r7, #98	; 0x62
 80049ea:	d80a      	bhi.n	8004a02 <_printf_i+0x32>
 80049ec:	2f00      	cmp	r7, #0
 80049ee:	f000 80d8 	beq.w	8004ba2 <_printf_i+0x1d2>
 80049f2:	2f58      	cmp	r7, #88	; 0x58
 80049f4:	f000 80a3 	beq.w	8004b3e <_printf_i+0x16e>
 80049f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a00:	e03a      	b.n	8004a78 <_printf_i+0xa8>
 8004a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a06:	2b15      	cmp	r3, #21
 8004a08:	d8f6      	bhi.n	80049f8 <_printf_i+0x28>
 8004a0a:	a001      	add	r0, pc, #4	; (adr r0, 8004a10 <_printf_i+0x40>)
 8004a0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a10:	08004a69 	.word	0x08004a69
 8004a14:	08004a7d 	.word	0x08004a7d
 8004a18:	080049f9 	.word	0x080049f9
 8004a1c:	080049f9 	.word	0x080049f9
 8004a20:	080049f9 	.word	0x080049f9
 8004a24:	080049f9 	.word	0x080049f9
 8004a28:	08004a7d 	.word	0x08004a7d
 8004a2c:	080049f9 	.word	0x080049f9
 8004a30:	080049f9 	.word	0x080049f9
 8004a34:	080049f9 	.word	0x080049f9
 8004a38:	080049f9 	.word	0x080049f9
 8004a3c:	08004b89 	.word	0x08004b89
 8004a40:	08004aad 	.word	0x08004aad
 8004a44:	08004b6b 	.word	0x08004b6b
 8004a48:	080049f9 	.word	0x080049f9
 8004a4c:	080049f9 	.word	0x080049f9
 8004a50:	08004bab 	.word	0x08004bab
 8004a54:	080049f9 	.word	0x080049f9
 8004a58:	08004aad 	.word	0x08004aad
 8004a5c:	080049f9 	.word	0x080049f9
 8004a60:	080049f9 	.word	0x080049f9
 8004a64:	08004b73 	.word	0x08004b73
 8004a68:	680b      	ldr	r3, [r1, #0]
 8004a6a:	1d1a      	adds	r2, r3, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	600a      	str	r2, [r1, #0]
 8004a70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0a3      	b.n	8004bc4 <_printf_i+0x1f4>
 8004a7c:	6825      	ldr	r5, [r4, #0]
 8004a7e:	6808      	ldr	r0, [r1, #0]
 8004a80:	062e      	lsls	r6, r5, #24
 8004a82:	f100 0304 	add.w	r3, r0, #4
 8004a86:	d50a      	bpl.n	8004a9e <_printf_i+0xce>
 8004a88:	6805      	ldr	r5, [r0, #0]
 8004a8a:	600b      	str	r3, [r1, #0]
 8004a8c:	2d00      	cmp	r5, #0
 8004a8e:	da03      	bge.n	8004a98 <_printf_i+0xc8>
 8004a90:	232d      	movs	r3, #45	; 0x2d
 8004a92:	426d      	negs	r5, r5
 8004a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a98:	485e      	ldr	r0, [pc, #376]	; (8004c14 <_printf_i+0x244>)
 8004a9a:	230a      	movs	r3, #10
 8004a9c:	e019      	b.n	8004ad2 <_printf_i+0x102>
 8004a9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004aa2:	6805      	ldr	r5, [r0, #0]
 8004aa4:	600b      	str	r3, [r1, #0]
 8004aa6:	bf18      	it	ne
 8004aa8:	b22d      	sxthne	r5, r5
 8004aaa:	e7ef      	b.n	8004a8c <_printf_i+0xbc>
 8004aac:	680b      	ldr	r3, [r1, #0]
 8004aae:	6825      	ldr	r5, [r4, #0]
 8004ab0:	1d18      	adds	r0, r3, #4
 8004ab2:	6008      	str	r0, [r1, #0]
 8004ab4:	0628      	lsls	r0, r5, #24
 8004ab6:	d501      	bpl.n	8004abc <_printf_i+0xec>
 8004ab8:	681d      	ldr	r5, [r3, #0]
 8004aba:	e002      	b.n	8004ac2 <_printf_i+0xf2>
 8004abc:	0669      	lsls	r1, r5, #25
 8004abe:	d5fb      	bpl.n	8004ab8 <_printf_i+0xe8>
 8004ac0:	881d      	ldrh	r5, [r3, #0]
 8004ac2:	4854      	ldr	r0, [pc, #336]	; (8004c14 <_printf_i+0x244>)
 8004ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2308      	moveq	r3, #8
 8004aca:	230a      	movne	r3, #10
 8004acc:	2100      	movs	r1, #0
 8004ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ad2:	6866      	ldr	r6, [r4, #4]
 8004ad4:	60a6      	str	r6, [r4, #8]
 8004ad6:	2e00      	cmp	r6, #0
 8004ad8:	bfa2      	ittt	ge
 8004ada:	6821      	ldrge	r1, [r4, #0]
 8004adc:	f021 0104 	bicge.w	r1, r1, #4
 8004ae0:	6021      	strge	r1, [r4, #0]
 8004ae2:	b90d      	cbnz	r5, 8004ae8 <_printf_i+0x118>
 8004ae4:	2e00      	cmp	r6, #0
 8004ae6:	d04d      	beq.n	8004b84 <_printf_i+0x1b4>
 8004ae8:	4616      	mov	r6, r2
 8004aea:	fbb5 f1f3 	udiv	r1, r5, r3
 8004aee:	fb03 5711 	mls	r7, r3, r1, r5
 8004af2:	5dc7      	ldrb	r7, [r0, r7]
 8004af4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004af8:	462f      	mov	r7, r5
 8004afa:	42bb      	cmp	r3, r7
 8004afc:	460d      	mov	r5, r1
 8004afe:	d9f4      	bls.n	8004aea <_printf_i+0x11a>
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d10b      	bne.n	8004b1c <_printf_i+0x14c>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	07df      	lsls	r7, r3, #31
 8004b08:	d508      	bpl.n	8004b1c <_printf_i+0x14c>
 8004b0a:	6923      	ldr	r3, [r4, #16]
 8004b0c:	6861      	ldr	r1, [r4, #4]
 8004b0e:	4299      	cmp	r1, r3
 8004b10:	bfde      	ittt	le
 8004b12:	2330      	movle	r3, #48	; 0x30
 8004b14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b1c:	1b92      	subs	r2, r2, r6
 8004b1e:	6122      	str	r2, [r4, #16]
 8004b20:	f8cd a000 	str.w	sl, [sp]
 8004b24:	464b      	mov	r3, r9
 8004b26:	aa03      	add	r2, sp, #12
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	f7ff fee2 	bl	80048f4 <_printf_common>
 8004b30:	3001      	adds	r0, #1
 8004b32:	d14c      	bne.n	8004bce <_printf_i+0x1fe>
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	b004      	add	sp, #16
 8004b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3e:	4835      	ldr	r0, [pc, #212]	; (8004c14 <_printf_i+0x244>)
 8004b40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	680e      	ldr	r6, [r1, #0]
 8004b48:	061f      	lsls	r7, r3, #24
 8004b4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b4e:	600e      	str	r6, [r1, #0]
 8004b50:	d514      	bpl.n	8004b7c <_printf_i+0x1ac>
 8004b52:	07d9      	lsls	r1, r3, #31
 8004b54:	bf44      	itt	mi
 8004b56:	f043 0320 	orrmi.w	r3, r3, #32
 8004b5a:	6023      	strmi	r3, [r4, #0]
 8004b5c:	b91d      	cbnz	r5, 8004b66 <_printf_i+0x196>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	f023 0320 	bic.w	r3, r3, #32
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	2310      	movs	r3, #16
 8004b68:	e7b0      	b.n	8004acc <_printf_i+0xfc>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	f043 0320 	orr.w	r3, r3, #32
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	2378      	movs	r3, #120	; 0x78
 8004b74:	4828      	ldr	r0, [pc, #160]	; (8004c18 <_printf_i+0x248>)
 8004b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b7a:	e7e3      	b.n	8004b44 <_printf_i+0x174>
 8004b7c:	065e      	lsls	r6, r3, #25
 8004b7e:	bf48      	it	mi
 8004b80:	b2ad      	uxthmi	r5, r5
 8004b82:	e7e6      	b.n	8004b52 <_printf_i+0x182>
 8004b84:	4616      	mov	r6, r2
 8004b86:	e7bb      	b.n	8004b00 <_printf_i+0x130>
 8004b88:	680b      	ldr	r3, [r1, #0]
 8004b8a:	6826      	ldr	r6, [r4, #0]
 8004b8c:	6960      	ldr	r0, [r4, #20]
 8004b8e:	1d1d      	adds	r5, r3, #4
 8004b90:	600d      	str	r5, [r1, #0]
 8004b92:	0635      	lsls	r5, r6, #24
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	d501      	bpl.n	8004b9c <_printf_i+0x1cc>
 8004b98:	6018      	str	r0, [r3, #0]
 8004b9a:	e002      	b.n	8004ba2 <_printf_i+0x1d2>
 8004b9c:	0671      	lsls	r1, r6, #25
 8004b9e:	d5fb      	bpl.n	8004b98 <_printf_i+0x1c8>
 8004ba0:	8018      	strh	r0, [r3, #0]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6123      	str	r3, [r4, #16]
 8004ba6:	4616      	mov	r6, r2
 8004ba8:	e7ba      	b.n	8004b20 <_printf_i+0x150>
 8004baa:	680b      	ldr	r3, [r1, #0]
 8004bac:	1d1a      	adds	r2, r3, #4
 8004bae:	600a      	str	r2, [r1, #0]
 8004bb0:	681e      	ldr	r6, [r3, #0]
 8004bb2:	6862      	ldr	r2, [r4, #4]
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f7fb fb1a 	bl	80001f0 <memchr>
 8004bbc:	b108      	cbz	r0, 8004bc2 <_printf_i+0x1f2>
 8004bbe:	1b80      	subs	r0, r0, r6
 8004bc0:	6060      	str	r0, [r4, #4]
 8004bc2:	6863      	ldr	r3, [r4, #4]
 8004bc4:	6123      	str	r3, [r4, #16]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bcc:	e7a8      	b.n	8004b20 <_printf_i+0x150>
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	4632      	mov	r2, r6
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	47d0      	blx	sl
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d0ab      	beq.n	8004b34 <_printf_i+0x164>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	079b      	lsls	r3, r3, #30
 8004be0:	d413      	bmi.n	8004c0a <_printf_i+0x23a>
 8004be2:	68e0      	ldr	r0, [r4, #12]
 8004be4:	9b03      	ldr	r3, [sp, #12]
 8004be6:	4298      	cmp	r0, r3
 8004be8:	bfb8      	it	lt
 8004bea:	4618      	movlt	r0, r3
 8004bec:	e7a4      	b.n	8004b38 <_printf_i+0x168>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4632      	mov	r2, r6
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	4640      	mov	r0, r8
 8004bf6:	47d0      	blx	sl
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d09b      	beq.n	8004b34 <_printf_i+0x164>
 8004bfc:	3501      	adds	r5, #1
 8004bfe:	68e3      	ldr	r3, [r4, #12]
 8004c00:	9903      	ldr	r1, [sp, #12]
 8004c02:	1a5b      	subs	r3, r3, r1
 8004c04:	42ab      	cmp	r3, r5
 8004c06:	dcf2      	bgt.n	8004bee <_printf_i+0x21e>
 8004c08:	e7eb      	b.n	8004be2 <_printf_i+0x212>
 8004c0a:	2500      	movs	r5, #0
 8004c0c:	f104 0619 	add.w	r6, r4, #25
 8004c10:	e7f5      	b.n	8004bfe <_printf_i+0x22e>
 8004c12:	bf00      	nop
 8004c14:	08005009 	.word	0x08005009
 8004c18:	0800501a 	.word	0x0800501a

08004c1c <_sbrk_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4d06      	ldr	r5, [pc, #24]	; (8004c38 <_sbrk_r+0x1c>)
 8004c20:	2300      	movs	r3, #0
 8004c22:	4604      	mov	r4, r0
 8004c24:	4608      	mov	r0, r1
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	f7fb ffea 	bl	8000c00 <_sbrk>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_sbrk_r+0x1a>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_sbrk_r+0x1a>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	200001d0 	.word	0x200001d0

08004c3c <__sread>:
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	460c      	mov	r4, r1
 8004c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c44:	f000 f8a0 	bl	8004d88 <_read_r>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	bfab      	itete	ge
 8004c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c50:	181b      	addge	r3, r3, r0
 8004c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c56:	bfac      	ite	ge
 8004c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c5a:	81a3      	strhlt	r3, [r4, #12]
 8004c5c:	bd10      	pop	{r4, pc}

08004c5e <__swrite>:
 8004c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c62:	461f      	mov	r7, r3
 8004c64:	898b      	ldrh	r3, [r1, #12]
 8004c66:	05db      	lsls	r3, r3, #23
 8004c68:	4605      	mov	r5, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	4616      	mov	r6, r2
 8004c6e:	d505      	bpl.n	8004c7c <__swrite+0x1e>
 8004c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c74:	2302      	movs	r3, #2
 8004c76:	2200      	movs	r2, #0
 8004c78:	f000 f868 	bl	8004d4c <_lseek_r>
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c86:	81a3      	strh	r3, [r4, #12]
 8004c88:	4632      	mov	r2, r6
 8004c8a:	463b      	mov	r3, r7
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c92:	f000 b817 	b.w	8004cc4 <_write_r>

08004c96 <__sseek>:
 8004c96:	b510      	push	{r4, lr}
 8004c98:	460c      	mov	r4, r1
 8004c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c9e:	f000 f855 	bl	8004d4c <_lseek_r>
 8004ca2:	1c43      	adds	r3, r0, #1
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	bf15      	itete	ne
 8004ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cb2:	81a3      	strheq	r3, [r4, #12]
 8004cb4:	bf18      	it	ne
 8004cb6:	81a3      	strhne	r3, [r4, #12]
 8004cb8:	bd10      	pop	{r4, pc}

08004cba <__sclose>:
 8004cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cbe:	f000 b813 	b.w	8004ce8 <_close_r>
	...

08004cc4 <_write_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4d07      	ldr	r5, [pc, #28]	; (8004ce4 <_write_r+0x20>)
 8004cc8:	4604      	mov	r4, r0
 8004cca:	4608      	mov	r0, r1
 8004ccc:	4611      	mov	r1, r2
 8004cce:	2200      	movs	r2, #0
 8004cd0:	602a      	str	r2, [r5, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f7fb ff43 	bl	8000b5e <_write>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_write_r+0x1e>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_write_r+0x1e>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	200001d0 	.word	0x200001d0

08004ce8 <_close_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4d06      	ldr	r5, [pc, #24]	; (8004d04 <_close_r+0x1c>)
 8004cec:	2300      	movs	r3, #0
 8004cee:	4604      	mov	r4, r0
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	602b      	str	r3, [r5, #0]
 8004cf4:	f7fb ff4f 	bl	8000b96 <_close>
 8004cf8:	1c43      	adds	r3, r0, #1
 8004cfa:	d102      	bne.n	8004d02 <_close_r+0x1a>
 8004cfc:	682b      	ldr	r3, [r5, #0]
 8004cfe:	b103      	cbz	r3, 8004d02 <_close_r+0x1a>
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	bd38      	pop	{r3, r4, r5, pc}
 8004d04:	200001d0 	.word	0x200001d0

08004d08 <_fstat_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4d07      	ldr	r5, [pc, #28]	; (8004d28 <_fstat_r+0x20>)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	602b      	str	r3, [r5, #0]
 8004d16:	f7fb ff4a 	bl	8000bae <_fstat>
 8004d1a:	1c43      	adds	r3, r0, #1
 8004d1c:	d102      	bne.n	8004d24 <_fstat_r+0x1c>
 8004d1e:	682b      	ldr	r3, [r5, #0]
 8004d20:	b103      	cbz	r3, 8004d24 <_fstat_r+0x1c>
 8004d22:	6023      	str	r3, [r4, #0]
 8004d24:	bd38      	pop	{r3, r4, r5, pc}
 8004d26:	bf00      	nop
 8004d28:	200001d0 	.word	0x200001d0

08004d2c <_isatty_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4d06      	ldr	r5, [pc, #24]	; (8004d48 <_isatty_r+0x1c>)
 8004d30:	2300      	movs	r3, #0
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	602b      	str	r3, [r5, #0]
 8004d38:	f7fb ff49 	bl	8000bce <_isatty>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_isatty_r+0x1a>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_isatty_r+0x1a>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	200001d0 	.word	0x200001d0

08004d4c <_lseek_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d07      	ldr	r5, [pc, #28]	; (8004d6c <_lseek_r+0x20>)
 8004d50:	4604      	mov	r4, r0
 8004d52:	4608      	mov	r0, r1
 8004d54:	4611      	mov	r1, r2
 8004d56:	2200      	movs	r2, #0
 8004d58:	602a      	str	r2, [r5, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f7fb ff42 	bl	8000be4 <_lseek>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d102      	bne.n	8004d6a <_lseek_r+0x1e>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	b103      	cbz	r3, 8004d6a <_lseek_r+0x1e>
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	bd38      	pop	{r3, r4, r5, pc}
 8004d6c:	200001d0 	.word	0x200001d0

08004d70 <__malloc_lock>:
 8004d70:	4801      	ldr	r0, [pc, #4]	; (8004d78 <__malloc_lock+0x8>)
 8004d72:	f7ff bb55 	b.w	8004420 <__retarget_lock_acquire_recursive>
 8004d76:	bf00      	nop
 8004d78:	200001c8 	.word	0x200001c8

08004d7c <__malloc_unlock>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	; (8004d84 <__malloc_unlock+0x8>)
 8004d7e:	f7ff bb50 	b.w	8004422 <__retarget_lock_release_recursive>
 8004d82:	bf00      	nop
 8004d84:	200001c8 	.word	0x200001c8

08004d88 <_read_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d07      	ldr	r5, [pc, #28]	; (8004da8 <_read_r+0x20>)
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	4608      	mov	r0, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fb fec4 	bl	8000b24 <_read>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_read_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_read_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	200001d0 	.word	0x200001d0

08004dac <_init>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr

08004db8 <_fini>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr
